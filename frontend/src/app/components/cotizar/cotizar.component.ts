import { Component, OnInit, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { EnviosService } from '../../services/envios.service';

interface Municipio {
  nombre: string;
  departamento: string;
}

interface Departamento {
  nombre: string;
  municipios: string[];
}

interface TipoPaquete {
  id: number;
  nombre: string;
  icono: string;
  limiteSize: string;
  limitePeso: string;
  descripcion: string;
  color: string;
}

interface PaqueteSeleccionado {
  id: string;
  tipo: TipoPaquete;
  cantidad: number;
  nombrePersonalizado: string;
}

interface ResultadoCotizacion {
  success: boolean;
  cotizacion?: any;
  message?: string;
  error?: string;
}

@Component({
  selector: 'app-cotizar',
  templateUrl: './cotizar.component.html',
  styleUrls: ['./cotizar.component.css']
})
export class CotizarComponent implements OnInit, OnDestroy {
  private subscription: Subscription = new Subscription();
  departamentosGuatemala: Departamento[] = [
    {
      nombre: 'Guatemala',
      municipios: [
        'Guatemala', 'Santa Catarina Pinula', 'San Jos√© Pinula', 'San Jos√© del Golfo',
        'Palencia', 'Chinautla', 'San Pedro Ayampuc', 'Mixco', 'San Pedro Sacatep√©quez',
        'San Juan Sacatep√©quez', 'San Raymundo', 'Chuarrancho', 'Fraijanes',
        'Amatitl√°n', 'Villa Nueva', 'Villa Canales', 'San Miguel Petapa'
      ]
    },
    {
      nombre: 'Alta Verapaz',
      municipios: [
        'Cob√°n', 'Santa Cruz Verapaz', 'San Crist√≥bal Verapaz', 'Tactic', 'Tamah√∫',
        'Tucur√∫', 'Panz√≥s', 'Senah√∫', 'San Pedro Carch√°', 'San Juan Chamelco',
        'Lanqu√≠n', 'Santa Mar√≠a Cahab√≥n', 'Chisec', 'Chahal', 'Fray Bartolom√© de las Casas',
        'La Tinta'
      ]
    },
    {
      nombre: 'Baja Verapaz',
      municipios: [
        'Salam√°', 'San Miguel Chicaj', 'Rabinal', 'Cubulco', 'Granados',
        'Santa Cruz el Chol', 'San Jer√≥nimo', 'Purulh√°'
      ]
    },
    {
      nombre: 'Chimaltenango',
      municipios: [
        'Chimaltenango', 'San Jos√© Poaquil', 'San Mart√≠n Jilotepeque', 'San Juan Comalapa',
        'Santa Apolonia', 'Tecp√°n', 'Patz√∫n', 'Pochuta', 'Patzic√≠a', 'Santa Cruz Balany√°',
        'Acatenango', 'Yepocapa', 'San Andr√©s Itzapa', 'Parramos', 'Zaragoza', 'El Tejar'
      ]
    },
    {
      nombre: 'Chiquimula',
      municipios: [
        'Chiquimula', 'San Jos√© la Arada', 'San Juan Ermita', 'Jocot√°n', 'Camot√°n',
        'Olopa', 'Esquipulas', 'Concepci√≥n Las Minas', 'Quezaltepeque', 'San Jacinto', 'Ipala'
      ]
    },
    {
      nombre: 'El Progreso',
      municipios: [
        'Guastatoya', 'Moraz√°n', 'San Agust√≠n Acasaguastl√°n', 'San Crist√≥bal Acasaguastl√°n',
        'El J√≠caro', 'Sansare', 'Sanarate', 'San Antonio La Paz'
      ]
    },
    {
      nombre: 'Escuintla',
      municipios: [
        'Escuintla', 'Santa Luc√≠a Cotzumalguapa', 'La Democracia', 'Siquinal√°',
        'Masagua', 'Tiquisate', 'La Gomera', 'Guanagazapa', 'San Jos√©',
        'Iztapa', 'Pal√≠n', 'San Vicente Pacaya', 'Nueva Concepci√≥n'
      ]
    },
    {
      nombre: 'Huehuetenango',
      municipios: [
        'Huehuetenango', 'Chiantla', 'Malacatancito', 'Cuilco', 'Nent√≥n', 'San Pedro Necta',
        'Jacaltenango', 'San Pedro Soloma', 'San Ildefonso Ixtahuac√°n', 'Santa B√°rbara',
        'La Libertad', 'La Democracia', 'San Miguel Acat√°n', 'San Rafael La Independencia',
        'Todos Santos Cuchumat√°n', 'San Juan Atit√°n', 'Santa Eulalia', 'San Mateo Ixtat√°n',
        'Colotenango', 'San Sebasti√°n Huehuetenango', 'Tectit√°n', 'Concepci√≥n Huista',
        'San Juan Ixcoy', 'San Antonio Huista', 'San Sebasti√°n Coat√°n', 'Santa Cruz Barillas',
        'Aguacat√°n', 'San Rafael Petzal', 'San Gaspar Ixchil', 'Santiago Chimaltenango',
        'Santa Ana Huista', 'Uni√≥n Cantinil'
      ]
    },
    {
      nombre: 'Izabal',
      municipios: [
        'Puerto Barrios', 'Livingston', 'El Estor', 'Morales', 'Los Amates'
      ]
    },
    {
      nombre: 'Jalapa',
      municipios: [
        'Jalapa', 'San Pedro Pinula', 'San Luis Jilotepeque', 'San Manuel Chaparr√≥n',
        'San Carlos Alzatate', 'Monjas', 'Mataquescuintla'
      ]
    },
    {
      nombre: 'Jutiapa',
      municipios: [
        'Jutiapa', 'El Progreso', 'Santa Catarina Mita', 'Agua Blanca', 'Asunci√≥n Mita',
        'Yupiltepeque', 'Atescatempa', 'Jerez', 'El Adelanto', 'Zapotitl√°n',
        'Comapa', 'Jalpatagua', 'Conguaco', 'Moyuta', 'Pasaco', 'San Jos√© Acatempa', 'Quesada'
      ]
    },
    {
      nombre: 'Pet√©n',
      municipios: [
        'Flores', 'San Jos√©', 'San Benito', 'San Andr√©s', 'La Libertad', 'San Francisco',
        'Santa Ana', 'Dolores', 'San Luis', 'Sayaxch√©', 'Melchor de Mencos', 'Popt√∫n',
        'Las Cruces', 'El Chal'
      ]
    },
    {
      nombre: 'Quetzaltenango',
      municipios: [
        'Quetzaltenango', 'Salcaj√°', 'Olintepeque', 'San Carlos Sija', 'Sibilia',
        'Cabric√°n', 'Cajol√°', 'San Miguel Sig√ºil√°', 'San Juan Ostuncalco', 'San Mateo',
        'Concepci√≥n Chiquirichapa', 'San Mart√≠n Sacatep√©quez', 'Almolonga', 'Cantel',
        'Huit√°n', 'Zunil', 'Colomba Costa Cuca', 'San Francisco La Uni√≥n', 'El Palmar',
        'Coatepeque', 'G√©nova', 'Flores Costa Cuca', 'La Esperanza', 'Palestina de Los Altos'
      ]
    },
    {
      nombre: 'Quich√©',
      municipios: [
        'Santa Cruz del Quich√©', 'Chich√©', 'Chinique', 'Zacualpa', 'Chajul', 'Santo Tom√°s Chichicastenango',
        'Patzit√©', 'San Antonio Ilotenango', 'San Pedro Jocopilas', 'Cun√©n', 'San Juan Cotzal',
        'Joyabaj', 'Nebaj', 'San Andr√©s Sajcabaj√°', 'San Miguel Uspant√°n', 'Sacapulas',
        'San Bartolom√© Jocotenango', 'Canill√°', 'Chicam√°n', 'Ixc√°n', 'Pachalum', 'Playa Grande'
      ]
    },
    {
      nombre: 'Retalhuleu',
      municipios: [
        'Retalhuleu', 'San Sebasti√°n', 'Santa Cruz Mulu√°', 'San Mart√≠n Zapotitl√°n',
        'San Felipe', 'San Andr√©s Villa Seca', 'Champerico', 'Nuevo San Carlos', 'El Asintal'
      ]
    },
    {
      nombre: 'Sacatep√©quez',
      municipios: [
        'Antigua Guatemala', 'Jocotenango', 'Pastores', 'Sumpango', 'Santo Domingo Xenacoj',
        'Santiago Sacatep√©quez', 'San Bartolom√© Milpas Altas', 'San Lucas Sacatep√©quez',
        'Santa Luc√≠a Milpas Altas', 'Magdalena Milpas Altas', 'Santa Mar√≠a de Jes√∫s',
        'Ciudad Vieja', 'San Miguel Due√±as', 'Alotenango', 'San Antonio Aguas Calientes', 'Santa Catarina Barahona'
      ]
    },
    {
      nombre: 'San Marcos',
      municipios: [
        'San Marcos', 'San Pedro Sacatep√©quez', 'San Antonio Sacatep√©quez', 'Comitancillo',
        'San Miguel Ixtahuac√°n', 'Concepci√≥n Tutuapa', 'Tacan√°', 'Sibinal', 'Tajumulco',
        'Tejutla', 'San Rafael Pie de la Cuesta', 'Nuevo Progreso', 'El Tumbador',
        'El Rodeo', 'Malacat√°n', 'Catarina', 'Ayutla', 'Oc√≥s', 'San Pablo',
        'El Quetzal', 'La Reforma', 'Pajapita', 'Ixchigu√°n', 'San Jos√© Ojetenam',
        'San Crist√≥bal Cucho', 'Sipacapa', 'Esquipulas Palo Gordo', 'R√≠o Blanco', 'San Lorenzo'
      ]
    },
    {
      nombre: 'Santa Rosa',
      municipios: [
        'Cuilapa', 'Casillas', 'Nueva Santa Rosa', 'Santa Rosa de Lima', 'Barberena',
        'Santa Mar√≠a Ixhuat√°n', 'Guazacap√°n', 'Santa Cruz Naranjo', 'Pueblo Nuevo Vi√±as',
        'Taxisco', 'Oratorio', 'San Juan Tecuaco', 'Chiquimulilla'
      ]
    },
    {
      nombre: 'Solol√°',
      municipios: [
        'Solol√°', 'San Jos√© Chacay√°', 'Santa Mar√≠a Visitaci√≥n', 'Santa Luc√≠a Utatl√°n',
        'Nahual√°', 'Santa Catarina Ixtahuac√°n', 'Santa Clara La Laguna', 'Concepci√≥n',
        'San Andr√©s Semetabaj', 'Panajachel', 'Santa Catarina Palop√≥', 'San Antonio Palop√≥',
        'San Lucas Tolim√°n', 'Santa Cruz La Laguna', 'San Pablo La Laguna', 'San Marcos La Laguna',
        'San Juan La Laguna', 'San Pedro La Laguna', 'Santiago Atitl√°n'
      ]
    },
    {
      nombre: 'Suchitep√©quez',
      municipios: [
        'Mazatenango', 'Cuyotenango', 'San Francisco Zapotitl√°n', 'San Bernardino',
        'San Jos√© El √çdolo', 'Santo Domingo Suchitep√©quez', 'San Lorenzo', 'Samayac',
        'San Pablo Jocopilas', 'San Antonio Suchitep√©quez', 'San Miguel Pan√°n',
        'San Gabriel', 'Chicacao', 'Patulul', 'Santa B√°rbara', 'San Juan Bautista',
        'Santo Tom√°s La Uni√≥n', 'Zunilito', 'Pueblo Nuevo', 'R√≠o Bravo'
      ]
    },
    {
      nombre: 'Totonicap√°n',
      municipios: [
        'Totonicap√°n', 'San Crist√≥bal Totonicap√°n', 'San Francisco El Alto',
        'San Andr√©s Xecul', 'Momostenango', 'Santa Mar√≠a Chiquimula', 'Santa Luc√≠a La Reforma', 'San Bartolo'
      ]
    },
    {
      nombre: 'Zacapa',
      municipios: [
        'Zacapa', 'Estanzuela', 'R√≠o Hondo', 'Gual√°n', 'Teculut√°n', 'Usumatl√°n',
        'Caba√±as', 'San Diego', 'La Uni√≥n', 'Huit√©'
      ]
    }
  ];

  // Variables para los formularios
  origenSeleccionado = '';
  destinoSeleccionado = '';
  origenFiltrado: string[] = [];
  destinoFiltrado: string[] = [];
  busquedaOrigen = '';
  busquedaDestino = '';
  mostrarListaOrigen = false;
  mostrarListaDestino = false;

  // Lista completa de municipios con departamento
  todosLosMunicipios: Municipio[] = [];

  // Variables para paquetes
  tiposPaquete: TipoPaquete[] = [
    {
      id: 1,
      nombre: 'Peque√±o',
      icono: 'üì¶',
      limiteSize: '28cm',
      limitePeso: '10lbs',
      descripcion: 'Ideal para documentos y objetos peque√±os',
      color: '#ffffffff'
    },
    {
      id: 2,
      nombre: 'Mediano',
      icono: 'üì¶',
      limiteSize: '36cm',
      limitePeso: '30lbs',
      descripcion: 'Perfect para ropa y objetos medianos',
      color: '#ffffffff'
    },
    {
      id: 3,
      nombre: 'Grande',
      icono: 'üì¶',
      limiteSize: '47cm',
      limitePeso: '40lbs',
      descripcion: 'Para electrodom√©sticos peque√±os y m√°s',
      color: '#ffffffff'
    },
    {
      id: 4,
      nombre: 'Extra Grande',
      icono: 'üì¶',
      limiteSize: '51cm',
      limitePeso: '59lbs',
      descripcion: 'Para objetos grandes y pesados',
      color: '#ffffffff'
    },
    {
      id: 5,
      nombre: 'Sobredimensionado',
      icono: 'üì¶',
      limiteSize: 'M√°s de 51cm',
      limitePeso: 'M√°s de 60lbs',
      descripcion: 'Para env√≠os especiales y muy pesados',
      color: '#ffffffff'
    }
  ];

  paquetesSeleccionados: PaqueteSeleccionado[] = [];
  tipoSeleccionado: TipoPaquete | null = null;

  // Nuevas propiedades para el sistema de cotizaci√≥n
  cotizacionEnProceso = false;
  cotizacionResultado: ResultadoCotizacion | null = null;
  mensajeError = '';
  servicioSeleccionado = 'standard';

  constructor(private enviosService: EnviosService) {
    this.generarListaMunicipios();
  }

  ngOnInit(): void {
    // Suscribirse a cambios en las cotizaciones
    this.subscription.add(
      this.enviosService.cotizacion$.subscribe(cotizacion => {
        if (cotizacion) {
          this.cotizacionResultado = cotizacion;
          this.cotizacionEnProceso = false;
        }
      })
    );
  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }

  generarListaMunicipios() {
    this.todosLosMunicipios = [];
    this.departamentosGuatemala.forEach(depto => {
      depto.municipios.forEach(municipio => {
        this.todosLosMunicipios.push({
          nombre: municipio,
          departamento: depto.nombre
        });
      });
    });
    this.origenFiltrado = this.todosLosMunicipios.map(m => `${m.nombre}, ${m.departamento}`);
    this.destinoFiltrado = this.todosLosMunicipios.map(m => `${m.nombre}, ${m.departamento}`);
  }

  filtrarOrigen(evento: any) {
    const busqueda = evento.target.value.toLowerCase();
    this.busquedaOrigen = busqueda;
    
    if (busqueda === '') {
      this.origenFiltrado = this.todosLosMunicipios.map(m => `${m.nombre}, ${m.departamento}`);
    } else {
      this.origenFiltrado = this.todosLosMunicipios
        .filter(m => 
          m.nombre.toLowerCase().includes(busqueda) || 
          m.departamento.toLowerCase().includes(busqueda)
        )
        .map(m => `${m.nombre}, ${m.departamento}`);
    }
  }

  filtrarDestino(evento: any) {
    const busqueda = evento.target.value.toLowerCase();
    this.busquedaDestino = busqueda;
    
    if (busqueda === '') {
      this.destinoFiltrado = this.todosLosMunicipios.map(m => `${m.nombre}, ${m.departamento}`);
    } else {
      this.destinoFiltrado = this.todosLosMunicipios
        .filter(m => 
          m.nombre.toLowerCase().includes(busqueda) || 
          m.departamento.toLowerCase().includes(busqueda)
        )
        .map(m => `${m.nombre}, ${m.departamento}`);
    }
  }

  mostrarListaCompleta(tipo: string) {
    if (tipo === 'origen') {
      this.mostrarListaOrigen = true;
      this.origenFiltrado = this.todosLosMunicipios.map(m => `${m.nombre}, ${m.departamento}`);
    } else if (tipo === 'destino') {
      this.mostrarListaDestino = true;
      this.destinoFiltrado = this.todosLosMunicipios.map(m => `${m.nombre}, ${m.departamento}`);
    }
  }

  ocultarLista(tipo: string) {
    setTimeout(() => {
      if (tipo === 'origen') {
        this.mostrarListaOrigen = false;
      } else if (tipo === 'destino') {
        this.mostrarListaDestino = false;
      }
    }, 200);
  }

  seleccionarOrigen(ubicacion: string) {
    this.origenSeleccionado = ubicacion;
    this.busquedaOrigen = ubicacion;
    this.mostrarListaOrigen = false;
  }

  seleccionarDestino(ubicacion: string) {
    this.destinoSeleccionado = ubicacion;
    this.busquedaDestino = ubicacion;
    this.mostrarListaDestino = false;
  }

  limpiarOrigen() {
    this.origenSeleccionado = '';
    this.busquedaOrigen = '';
    this.mostrarListaOrigen = false;
  }

  limpiarDestino() {
    this.destinoSeleccionado = '';
    this.busquedaDestino = '';
    this.mostrarListaDestino = false;
  }

  cotizarEnvio() {
    // Limpiar estados anteriores
    this.mensajeError = '';
    this.cotizacionResultado = null;

    // Validaciones b√°sicas
    if (!this.origenSeleccionado || !this.destinoSeleccionado || this.paquetesSeleccionados.length === 0) {
      let mensaje = 'Por favor completa la siguiente informaci√≥n:\n';
      if (!this.origenSeleccionado) mensaje += '- Selecciona el origen\n';
      if (!this.destinoSeleccionado) mensaje += '- Selecciona el destino\n';
      if (this.paquetesSeleccionados.length === 0) mensaje += '- Agrega al menos un paquete\n';
      this.mensajeError = mensaje;
      return;
    }

    // Preparar datos para la API
    this.cotizacionEnProceso = true;
    
    const requestData = {
      origen: this.origenSeleccionado,
      destino: this.destinoSeleccionado,
      paquetes: this.enviosService.convertirPaquetesParaAPI(this.paquetesSeleccionados),
      servicio: this.servicioSeleccionado
    };

    console.log('üöÄ Enviando solicitud de cotizaci√≥n:', requestData);

    // Llamar al servicio
    this.subscription.add(
      this.enviosService.cotizarEnvio(requestData).subscribe({
        next: (response) => {
          console.log('‚úÖ Cotizaci√≥n recibida:', response);
          this.cotizacionResultado = response;
          this.cotizacionEnProceso = false;
          
          if (response.success) {
            // Scroll hacia los resultados
            setTimeout(() => {
              const resultElement = document.getElementById('cotizacion-resultado');
              if (resultElement) {
                resultElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
              }
            }, 100);
          }
        },
        error: (error) => {
          console.error('‚ùå Error en cotizaci√≥n:', error);
          this.cotizacionEnProceso = false;
          this.mensajeError = 'Error al obtener la cotizaci√≥n. Por favor intenta nuevamente.';
          
          if (error.error?.message) {
            this.mensajeError = error.error.message;
          }
        }
      })
    );
  }

  // M√©todo para cambiar el tipo de servicio
  cambiarServicio(nuevoServicio: string) {
    this.servicioSeleccionado = nuevoServicio;
    // Si ya hay una cotizaci√≥n, recalcular autom√°ticamente
    if (this.cotizacionResultado && this.cotizacionResultado.success) {
      this.cotizarEnvio();
    }
  }

  // M√©todo para obtener el nombre del servicio seleccionado
  getNombreServicio(servicioId: string): string {
    const servicios: { [key: string]: string } = {
      'standard': 'Env√≠o Est√°ndar',
      'express': 'Env√≠o Express',
      'overnight': 'Env√≠o Nocturno'
    };
    return servicios[servicioId] || servicioId;
  }

  // M√©todo para formatear precios
  formatearPrecio(precio: number): string {
    return this.enviosService.formatearPrecio(precio);
  }

  // M√©todo para limpiar cotizaci√≥n
  limpiarCotizacion() {
    this.cotizacionResultado = null;
    this.mensajeError = '';
    this.enviosService.limpiarCotizacion();
  }

  // M√©todo para formatear fechas
  formatearFecha(fecha: string): string {
    const date = new Date(fecha);
    return date.toLocaleDateString('es-GT', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  // M√©todo para obtener el desglose de precios
  getDesgloseItems(breakdown: any): Array<{concepto: string, valor: number}> {
    return [
      { concepto: 'Tarifa base', valor: breakdown.basePrice },
      { concepto: 'Costo por peso', valor: breakdown.weightCost },
      { concepto: 'Costo por distancia', valor: breakdown.distanceCost },
      { concepto: 'Seguro', valor: breakdown.insuranceCost },
      { concepto: 'Recargo por manejo', valor: breakdown.handlingSurcharge },
      { concepto: 'Recargo por combustible', valor: breakdown.fuelSurcharge }
    ].filter(item => item.valor > 0);
  }

  // M√©todo para proceder con el env√≠o
  procederConEnvio() {
    if (this.cotizacionResultado) {
      // Guardar datos en sessionStorage para el siguiente paso
      sessionStorage.setItem('cotizacionDatos', JSON.stringify(this.cotizacionResultado));
      sessionStorage.setItem('datosEnvio', JSON.stringify({
        origen: this.origenSeleccionado,
        destino: this.destinoSeleccionado,
        paquetes: this.paquetesSeleccionados,
        servicio: this.servicioSeleccionado
      }));
      
      // Navegar a la p√°gina de realizar env√≠o (si existe)
      // this.router.navigate(['/realizar-envio']);
      
      // Por ahora mostrar mensaje
      alert('Redirigiendo a realizar env√≠o... (funcionalidad pendiente)');
    }
  }

  // M√©todo para nueva cotizaci√≥n
  nuevaCotizacion() {
    this.limpiarCotizacion();
    // Mantener origen y destino, solo limpiar paquetes si se desea
    // this.paquetesSeleccionados = [];
  }

  // M√©todos para manejo de paquetes
  seleccionarTipoPaquete(tipo: TipoPaquete) {
    this.tipoSeleccionado = tipo;
  }

  agregarPaquete() {
    if (this.tipoSeleccionado) {
      const nuevoPaquete: PaqueteSeleccionado = {
        id: Date.now().toString(),
        tipo: this.tipoSeleccionado,
        cantidad: 1,
        nombrePersonalizado: `${this.tipoSeleccionado.nombre} ${this.paquetesSeleccionados.length + 1}`
      };
      this.paquetesSeleccionados.push(nuevoPaquete);
      this.tipoSeleccionado = null;
    } else {
      alert('Por favor selecciona un tipo de paquete primero');
    }
  }

  eliminarPaquete(id: string) {
    this.paquetesSeleccionados = this.paquetesSeleccionados.filter(p => p.id !== id);
  }

  actualizarCantidad(id: string, cantidad: number) {
    const paquete = this.paquetesSeleccionados.find(p => p.id === id);
    if (paquete && cantidad > 0) {
      paquete.cantidad = cantidad;
    }
  }

  actualizarNombre(id: string, nombre: string) {
    const paquete = this.paquetesSeleccionados.find(p => p.id === id);
    if (paquete) {
      paquete.nombrePersonalizado = nombre;
    }
  }
}