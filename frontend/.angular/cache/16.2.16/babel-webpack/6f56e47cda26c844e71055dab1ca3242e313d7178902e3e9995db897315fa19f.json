{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DatabaseService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3005/api';\n  }\n  getHeaders() {\n    const token = localStorage.getItem('token');\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  /**\n   * Obtener estado de conexión de la base de datos\n   */\n  getStatus() {\n    return this.http.get(`${this.apiUrl}/database/status`, {\n      headers: this.getHeaders()\n    });\n  }\n  /**\n   * Listar todas las tablas de la base de datos\n   */\n  getTables() {\n    return this.http.get(`${this.apiUrl}/database/tables`, {\n      headers: this.getHeaders()\n    });\n  }\n  /**\n   * Obtener datos de una tabla específica\n   */\n  getTableData(tableName, limit = 100, offset = 0) {\n    return this.http.get(`${this.apiUrl}/database/tables/${tableName}?limit=${limit}&offset=${offset}`, {\n      headers: this.getHeaders()\n    });\n  }\n  /**\n   * Ejecutar consulta SQL personalizada (solo SELECT)\n   */\n  executeQuery(query) {\n    return this.http.post(`${this.apiUrl}/database/query`, {\n      query\n    }, {\n      headers: this.getHeaders()\n    });\n  }\n  /**\n   * Obtener estadísticas de la base de datos\n   */\n  getStats() {\n    return this.http.get(`${this.apiUrl}/database/stats`, {\n      headers: this.getHeaders()\n    });\n  }\n  static {\n    this.ɵfac = function DatabaseService_Factory(t) {\n      return new (t || DatabaseService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DatabaseService,\n      factory: DatabaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","DatabaseService","constructor","http","apiUrl","getHeaders","token","localStorage","getItem","getStatus","get","headers","getTables","getTableData","tableName","limit","offset","executeQuery","query","post","getStats","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ferna\\Desktop\\envios ds\\DsEnvios\\frontend\\src\\app\\services\\database.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface DatabaseStatus {\r\n  connected: boolean;\r\n  database: string;\r\n  version: string;\r\n  serverTime: string;\r\n}\r\n\r\nexport interface TableColumn {\r\n  name: string;\r\n  type: string;\r\n  null: boolean;\r\n  key: string;\r\n  default: any;\r\n  extra: string;\r\n}\r\n\r\nexport interface TableInfo {\r\n  name: string;\r\n  rowCount: number;\r\n  columns: TableColumn[];\r\n}\r\n\r\nexport interface TableData {\r\n  tableName: string;\r\n  rows: any[];\r\n  total: number;\r\n  limit: number;\r\n  offset: number;\r\n}\r\n\r\nexport interface DatabaseStats {\r\n  totalTables: number;\r\n  tables: Array<{\r\n    name: string;\r\n    rowCount: number;\r\n  }>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatabaseService {\r\n  private apiUrl = 'http://localhost:3005/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private getHeaders(): HttpHeaders {\r\n    const token = localStorage.getItem('token');\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtener estado de conexión de la base de datos\r\n   */\r\n  getStatus(): Observable<{ success: boolean; data?: DatabaseStatus; error?: string }> {\r\n    return this.http.get<any>(`${this.apiUrl}/database/status`, {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Listar todas las tablas de la base de datos\r\n   */\r\n  getTables(): Observable<{ success: boolean; data?: TableInfo[]; error?: string }> {\r\n    return this.http.get<any>(`${this.apiUrl}/database/tables`, {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtener datos de una tabla específica\r\n   */\r\n  getTableData(tableName: string, limit: number = 100, offset: number = 0): Observable<{ success: boolean; data?: TableData; error?: string }> {\r\n    return this.http.get<any>(`${this.apiUrl}/database/tables/${tableName}?limit=${limit}&offset=${offset}`, {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Ejecutar consulta SQL personalizada (solo SELECT)\r\n   */\r\n  executeQuery(query: string): Observable<{ success: boolean; data?: { rows: any[]; count: number }; error?: string }> {\r\n    return this.http.post<any>(`${this.apiUrl}/database/query`, \r\n      { query },\r\n      { headers: this.getHeaders() }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener estadísticas de la base de datos\r\n   */\r\n  getStats(): Observable<{ success: boolean; data?: DatabaseStats; error?: string }> {\r\n    return this.http.get<any>(`${this.apiUrl}/database/stats`, {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AA4C9D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,2BAA2B;EAEL;EAE/BC,UAAUA,CAAA;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAIR,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUM,KAAK;KACjC,CAAC;EACJ;EAEA;;;EAGAG,SAASA,CAAA;IACP,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,MAAM,kBAAkB,EAAE;MAC1DO,OAAO,EAAE,IAAI,CAACN,UAAU;KACzB,CAAC;EACJ;EAEA;;;EAGAO,SAASA,CAAA;IACP,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,MAAM,kBAAkB,EAAE;MAC1DO,OAAO,EAAE,IAAI,CAACN,UAAU;KACzB,CAAC;EACJ;EAEA;;;EAGAQ,YAAYA,CAACC,SAAiB,EAAEC,KAAA,GAAgB,GAAG,EAAEC,MAAA,GAAiB,CAAC;IACrE,OAAO,IAAI,CAACb,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,MAAM,oBAAoBU,SAAS,UAAUC,KAAK,WAAWC,MAAM,EAAE,EAAE;MACvGL,OAAO,EAAE,IAAI,CAACN,UAAU;KACzB,CAAC;EACJ;EAEA;;;EAGAY,YAAYA,CAACC,KAAa;IACxB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAM,GAAG,IAAI,CAACf,MAAM,iBAAiB,EACxD;MAAEc;IAAK,CAAE,EACT;MAAEP,OAAO,EAAE,IAAI,CAACN,UAAU;IAAE,CAAE,CAC/B;EACH;EAEA;;;EAGAe,QAAQA,CAAA;IACN,OAAO,IAAI,CAACjB,IAAI,CAACO,GAAG,CAAM,GAAG,IAAI,CAACN,MAAM,iBAAiB,EAAE;MACzDO,OAAO,EAAE,IAAI,CAACN,UAAU;KACzB,CAAC;EACJ;;;uBAzDWJ,eAAe,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfvB,eAAe;MAAAwB,OAAA,EAAfxB,eAAe,CAAAyB,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}