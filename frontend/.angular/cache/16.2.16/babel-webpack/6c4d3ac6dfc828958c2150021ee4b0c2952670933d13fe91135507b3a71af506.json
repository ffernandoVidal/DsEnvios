{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.subscription = new Subscription();\n    this.loginForm = {\n      username: '',\n      password: ''\n    };\n    // Estados del formulario\n    this.isLoading = false;\n    this.errorMessage = '';\n    this.showPassword = false;\n  }\n  ngOnInit() {\n    // Si ya está autenticado, redirigir al admin\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/admin']);\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  onSubmit() {\n    // Limpiar errores previos\n    this.errorMessage = '';\n    // Validaciones básicas\n    if (!this.loginForm.username || !this.loginForm.password) {\n      this.errorMessage = 'Por favor completa todos los campos';\n      return;\n    }\n    if (this.loginForm.username.length < 3) {\n      this.errorMessage = 'El usuario debe tener al menos 3 caracteres';\n      return;\n    }\n    if (this.loginForm.password.length < 6) {\n      this.errorMessage = 'La contraseña debe tener al menos 6 caracteres';\n      return;\n    }\n    // Iniciar proceso de login\n    this.isLoading = true;\n    this.subscription.add(this.authService.login(this.loginForm.username, this.loginForm.password).subscribe({\n      next: response => {\n        console.log('✅ Login exitoso:', response);\n        this.isLoading = false;\n        if (response.success) {\n          // Redirigir al admin\n          this.router.navigate(['/admin']);\n        } else {\n          this.errorMessage = response.message || 'Error de autenticación';\n        }\n      },\n      error: error => {\n        console.error('❌ Error en login:', error);\n        this.isLoading = false;\n        if (error.status === 401) {\n          this.errorMessage = 'Usuario o contraseña incorrectos';\n        } else if (error.status === 0) {\n          this.errorMessage = 'Error de conexión con el servidor';\n        } else {\n          this.errorMessage = error.error?.message || 'Error interno del servidor';\n        }\n      }\n    }));\n  }\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n  onUsernameChange(event) {\n    this.loginForm.username = event.target.value.trim();\n    this.clearError();\n  }\n  onPasswordChange(event) {\n    this.loginForm.password = event.target.value;\n    this.clearError();\n  }\n  clearError() {\n    if (this.errorMessage) {\n      this.errorMessage = '';\n    }\n  }\n  // Método para demo/testing (remover en producción)\n  fillDemoCredentials(role) {\n    switch (role) {\n      case 'admin':\n        this.loginForm.username = 'admin';\n        this.loginForm.password = 'admin123';\n        break;\n      case 'user':\n        this.loginForm.username = 'usuario1';\n        this.loginForm.password = '123456';\n        break;\n      case 'operator':\n        this.loginForm.username = 'operador';\n        this.loginForm.password = 'operador123';\n        break;\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Subscription","LoginComponent","constructor","authService","router","subscription","loginForm","username","password","isLoading","errorMessage","showPassword","ngOnInit","isAuthenticated","navigate","ngOnDestroy","unsubscribe","onSubmit","length","add","login","subscribe","next","response","console","log","success","message","error","status","togglePasswordVisibility","onUsernameChange","event","target","value","trim","clearError","onPasswordChange","fillDemoCredentials","role","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Ferna\\Desktop\\envios\\DsEnvios\\frontend\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n//import { AuthService } from '../../services/auth.service';\r\n\r\ninterface LoginForm {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  success: boolean;\r\n  message: string;\r\n  user?: {\r\n    id: string;\r\n    username: string;\r\n    name: string;\r\n    role: string;\r\n    email: string;\r\n  };\r\n  token?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  private subscription: Subscription = new Subscription();\r\n  \r\n  loginForm: LoginForm = {\r\n    username: '',\r\n    password: ''\r\n  };\r\n\r\n  // Estados del formulario\r\n  isLoading = false;\r\n  errorMessage = '';\r\n  showPassword = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Si ya está autenticado, redirigir al admin\r\n    if (this.authService.isAuthenticated()) {\r\n      this.router.navigate(['/admin']);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    // Limpiar errores previos\r\n    this.errorMessage = '';\r\n    \r\n    // Validaciones básicas\r\n    if (!this.loginForm.username || !this.loginForm.password) {\r\n      this.errorMessage = 'Por favor completa todos los campos';\r\n      return;\r\n    }\r\n\r\n    if (this.loginForm.username.length < 3) {\r\n      this.errorMessage = 'El usuario debe tener al menos 3 caracteres';\r\n      return;\r\n    }\r\n\r\n    if (this.loginForm.password.length < 6) {\r\n      this.errorMessage = 'La contraseña debe tener al menos 6 caracteres';\r\n      return;\r\n    }\r\n\r\n    // Iniciar proceso de login\r\n    this.isLoading = true;\r\n\r\n    this.subscription.add(\r\n      this.authService.login(this.loginForm.username, this.loginForm.password).subscribe({\r\n        next: (response: LoginResponse) => {\r\n          console.log('✅ Login exitoso:', response);\r\n          this.isLoading = false;\r\n          \r\n          if (response.success) {\r\n            // Redirigir al admin\r\n            this.router.navigate(['/admin']);\r\n          } else {\r\n            this.errorMessage = response.message || 'Error de autenticación';\r\n          }\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          console.error('❌ Error en login:', error);\r\n          this.isLoading = false;\r\n          \r\n          if (error.status === 401) {\r\n            this.errorMessage = 'Usuario o contraseña incorrectos';\r\n          } else if (error.status === 0) {\r\n            this.errorMessage = 'Error de conexión con el servidor';\r\n          } else {\r\n            this.errorMessage = error.error?.message || 'Error interno del servidor';\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  togglePasswordVisibility(): void {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  onUsernameChange(event: any): void {\r\n    this.loginForm.username = event.target.value.trim();\r\n    this.clearError();\r\n  }\r\n\r\n  onPasswordChange(event: any): void {\r\n    this.loginForm.password = event.target.value;\r\n    this.clearError();\r\n  }\r\n\r\n  private clearError(): void {\r\n    if (this.errorMessage) {\r\n      this.errorMessage = '';\r\n    }\r\n  }\r\n\r\n  // Método para demo/testing (remover en producción)\r\n  fillDemoCredentials(role: string): void {\r\n    switch (role) {\r\n      case 'admin':\r\n        this.loginForm.username = 'admin';\r\n        this.loginForm.password = 'admin123';\r\n        break;\r\n      case 'user':\r\n        this.loginForm.username = 'usuario1';\r\n        this.loginForm.password = '123456';\r\n        break;\r\n      case 'operator':\r\n        this.loginForm.username = 'operador';\r\n        this.loginForm.password = 'operador123';\r\n        break;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}