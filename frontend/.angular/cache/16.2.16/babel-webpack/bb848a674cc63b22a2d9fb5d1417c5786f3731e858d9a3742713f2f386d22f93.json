{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3005/api';\n    // Subjects para manejar el estado de autenticaci√≥n\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n    // Observables p√∫blicos\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n    // Cargar datos del usuario desde localStorage al inicializar\n    this.loadUserFromStorage();\n  }\n  getHttpOptions() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n  }\n  /**\n   * Realizar login con credenciales\n   */\n  login(username, password) {\n    const loginData = {\n      username,\n      password\n    };\n    console.log('üîê Iniciando login para usuario:', username);\n    return this.http.post(`${this.apiUrl}/login`, loginData, this.getHttpOptions()).pipe(tap(response => {\n      console.log('üì° Respuesta del servidor:', response);\n      if (response.success && response.user) {\n        this.setCurrentUser(response.user);\n        // Guardar token si existe\n        if (response.token) {\n          localStorage.setItem('authToken', response.token);\n        }\n        console.log('‚úÖ Usuario autenticado correctamente');\n      }\n    }), catchError(error => {\n      console.error('‚ùå Error en login:', error);\n      this.logout(); // Limpiar cualquier estado previo\n      throw error;\n    }));\n  }\n  /**\n   * Cerrar sesi√≥n\n   */\n  logout() {\n    console.log('üö™ Cerrando sesi√≥n...');\n    // Limpiar localStorage\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('authToken');\n    // Limpiar subjects\n    this.currentUserSubject.next(null);\n    this.isAuthenticatedSubject.next(false);\n    console.log('‚úÖ Sesi√≥n cerrada');\n  }\n  /**\n   * Verificar si el usuario est√° autenticado\n   */\n  isAuthenticated() {\n    return this.isAuthenticatedSubject.value;\n  }\n  /**\n   * Obtener el usuario actual\n   */\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  /**\n   * Obtener el token de autenticaci√≥n\n   */\n  getAuthToken() {\n    return localStorage.getItem('authToken');\n  }\n  /**\n   * Verificar si el usuario tiene un rol espec√≠fico\n   */\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user ? user.role === role : false;\n  }\n  /**\n   * Verificar si el usuario es admin\n   */\n  isAdmin() {\n    return this.hasRole('admin');\n  }\n  /**\n   * Verificar si el usuario es operador\n   */\n  isOperator() {\n    return this.hasRole('operator') || this.hasRole('admin');\n  }\n  /**\n   * Verificar la validez del token en el servidor\n   */\n  validateToken() {\n    const token = this.getAuthToken();\n    if (!token) {\n      return of(false);\n    }\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    });\n    return this.http.get(`${this.apiUrl}/validate-token`, {\n      headers\n    }).pipe(tap(response => {\n      if (response.valid && response.user) {\n        this.setCurrentUser(response.user);\n      } else {\n        this.logout();\n      }\n    }), catchError(error => {\n      console.error('‚ùå Token inv√°lido:', error);\n      this.logout();\n      return of(false);\n    }));\n  }\n  /**\n   * Establecer el usuario actual\n   */\n  setCurrentUser(user) {\n    // Guardar en localStorage\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    // Actualizar subjects\n    this.currentUserSubject.next(user);\n    this.isAuthenticatedSubject.next(true);\n  }\n  /**\n   * Cargar usuario desde localStorage\n   */\n  loadUserFromStorage() {\n    try {\n      const userData = localStorage.getItem('currentUser');\n      const token = localStorage.getItem('authToken');\n      if (userData && token) {\n        const user = JSON.parse(userData);\n        this.currentUserSubject.next(user);\n        this.isAuthenticatedSubject.next(true);\n        console.log('üë§ Usuario cargado desde storage:', user.username);\n        // Validar token en el servidor (opcional)\n        // this.validateToken().subscribe();\n      }\n    } catch (error) {\n      console.error('‚ùå Error cargando usuario desde storage:', error);\n      this.logout();\n    }\n  }\n  /**\n   * Obtener informaci√≥n del perfil del usuario\n   */\n  getProfile() {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.getAuthToken()}`,\n      'Content-Type': 'application/json'\n    });\n    return this.http.get(`${this.apiUrl}/profile`, {\n      headers\n    }).pipe(tap(user => {\n      this.setCurrentUser(user);\n    }), catchError(error => {\n      console.error('‚ùå Error obteniendo perfil:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Refrescar el token de autenticaci√≥n\n   */\n  refreshToken() {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.getAuthToken()}`,\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/refresh-token`, {}, {\n      headers\n    }).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('authToken', response.token);\n      }\n    }), catchError(error => {\n      console.error('‚ùå Error refrescando token:', error);\n      this.logout();\n      throw error;\n    }));\n  }\n  static {\n    this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","of","tap","catchError","AuthService","constructor","http","apiUrl","currentUserSubject","isAuthenticatedSubject","currentUser$","asObservable","isAuthenticated$","loadUserFromStorage","getHttpOptions","headers","login","username","password","loginData","console","log","post","pipe","response","success","user","setCurrentUser","token","localStorage","setItem","error","logout","removeItem","next","isAuthenticated","value","getCurrentUser","getAuthToken","getItem","hasRole","role","isAdmin","isOperator","validateToken","get","valid","JSON","stringify","userData","parse","getProfile","refreshToken","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["C:\\Users\\Ferna\\Desktop\\envios\\DsEnvios\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, of } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\n\r\n// Interfaces para la autenticaci√≥n\r\ninterface LoginRequest {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  success: boolean;\r\n  message: string;\r\n  user?: {\r\n    id: string;\r\n    username: string;\r\n    name: string;\r\n    role: string;\r\n    email: string;\r\n  };\r\n  token?: string;\r\n}\r\n\r\ninterface User {\r\n  id: string;\r\n  username: string;\r\n  name: string;\r\n  role: string;\r\n  email: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3005/api';\r\n  \r\n  // Subjects para manejar el estado de autenticaci√≥n\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  \r\n  // Observables p√∫blicos\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Cargar datos del usuario desde localStorage al inicializar\r\n    this.loadUserFromStorage();\r\n  }\r\n\r\n  private getHttpOptions() {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Realizar login con credenciales\r\n   */\r\n  login(username: string, password: string): Observable<LoginResponse> {\r\n    const loginData: LoginRequest = { username, password };\r\n    \r\n    console.log('üîê Iniciando login para usuario:', username);\r\n\r\n    return this.http.post<LoginResponse>(\r\n      `${this.apiUrl}/login`, \r\n      loginData, \r\n      this.getHttpOptions()\r\n    ).pipe(\r\n      tap(response => {\r\n        console.log('üì° Respuesta del servidor:', response);\r\n        \r\n        if (response.success && response.user) {\r\n          this.setCurrentUser(response.user);\r\n          \r\n          // Guardar token si existe\r\n          if (response.token) {\r\n            localStorage.setItem('authToken', response.token);\r\n          }\r\n          \r\n          console.log('‚úÖ Usuario autenticado correctamente');\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Error en login:', error);\r\n        this.logout(); // Limpiar cualquier estado previo\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Cerrar sesi√≥n\r\n   */\r\n  logout(): void {\r\n    console.log('üö™ Cerrando sesi√≥n...');\r\n    \r\n    // Limpiar localStorage\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('authToken');\r\n    \r\n    // Limpiar subjects\r\n    this.currentUserSubject.next(null);\r\n    this.isAuthenticatedSubject.next(false);\r\n    \r\n    console.log('‚úÖ Sesi√≥n cerrada');\r\n  }\r\n\r\n  /**\r\n   * Verificar si el usuario est√° autenticado\r\n   */\r\n  isAuthenticated(): boolean {\r\n    return this.isAuthenticatedSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Obtener el usuario actual\r\n   */\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Obtener el token de autenticaci√≥n\r\n   */\r\n  getAuthToken(): string | null {\r\n    return localStorage.getItem('authToken');\r\n  }\r\n\r\n  /**\r\n   * Verificar si el usuario tiene un rol espec√≠fico\r\n   */\r\n  hasRole(role: string): boolean {\r\n    const user = this.getCurrentUser();\r\n    return user ? user.role === role : false;\r\n  }\r\n\r\n  /**\r\n   * Verificar si el usuario es admin\r\n   */\r\n  isAdmin(): boolean {\r\n    return this.hasRole('admin');\r\n  }\r\n\r\n  /**\r\n   * Verificar si el usuario es operador\r\n   */\r\n  isOperator(): boolean {\r\n    return this.hasRole('operator') || this.hasRole('admin');\r\n  }\r\n\r\n  /**\r\n   * Verificar la validez del token en el servidor\r\n   */\r\n  validateToken(): Observable<boolean> {\r\n    const token = this.getAuthToken();\r\n    \r\n    if (!token) {\r\n      return of(false);\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n\r\n    return this.http.get<any>(`${this.apiUrl}/validate-token`, { headers }).pipe(\r\n      tap(response => {\r\n        if (response.valid && response.user) {\r\n          this.setCurrentUser(response.user);\r\n        } else {\r\n          this.logout();\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Token inv√°lido:', error);\r\n        this.logout();\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Establecer el usuario actual\r\n   */\r\n  private setCurrentUser(user: User): void {\r\n    // Guardar en localStorage\r\n    localStorage.setItem('currentUser', JSON.stringify(user));\r\n    \r\n    // Actualizar subjects\r\n    this.currentUserSubject.next(user);\r\n    this.isAuthenticatedSubject.next(true);\r\n  }\r\n\r\n  /**\r\n   * Cargar usuario desde localStorage\r\n   */\r\n  private loadUserFromStorage(): void {\r\n    try {\r\n      const userData = localStorage.getItem('currentUser');\r\n      const token = localStorage.getItem('authToken');\r\n      \r\n      if (userData && token) {\r\n        const user: User = JSON.parse(userData);\r\n        this.currentUserSubject.next(user);\r\n        this.isAuthenticatedSubject.next(true);\r\n        \r\n        console.log('üë§ Usuario cargado desde storage:', user.username);\r\n        \r\n        // Validar token en el servidor (opcional)\r\n        // this.validateToken().subscribe();\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error cargando usuario desde storage:', error);\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Obtener informaci√≥n del perfil del usuario\r\n   */\r\n  getProfile(): Observable<User> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.getAuthToken()}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n\r\n    return this.http.get<User>(`${this.apiUrl}/profile`, { headers }).pipe(\r\n      tap(user => {\r\n        this.setCurrentUser(user);\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Error obteniendo perfil:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Refrescar el token de autenticaci√≥n\r\n   */\r\n  refreshToken(): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.getAuthToken()}`,\r\n      'Content-Type': 'application/json'\r\n    });\r\n\r\n    return this.http.post<any>(`${this.apiUrl}/refresh-token`, {}, { headers }).pipe(\r\n      tap(response => {\r\n        if (response.token) {\r\n          localStorage.setItem('authToken', response.token);\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Error refrescando token:', error);\r\n        this.logout();\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}