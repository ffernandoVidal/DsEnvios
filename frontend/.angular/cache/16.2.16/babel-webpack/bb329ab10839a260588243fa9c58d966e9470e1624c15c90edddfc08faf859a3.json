{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let RoleGuard = /*#__PURE__*/(() => {\n  class RoleGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      const requiredRoles = route.data['roles'];\n      const user = this.authService.getCurrentUser();\n      console.log(' RoleGuard: Verificando roles para:', state.url);\n      console.log('Roles requeridos:', requiredRoles);\n      console.log(' Usuario actual:', user);\n      if (!this.authService.isAuthenticated()) {\n        console.log(' RoleGuard: Usuario no autenticado');\n        this.router.navigate(['/login']);\n        return false;\n      }\n      if (!user) {\n        console.log(' RoleGuard: No hay datos de usuario');\n        this.router.navigate(['/login']);\n        return false;\n      }\n      if (!requiredRoles || requiredRoles.length === 0) {\n        console.log(' RoleGuard: No se requieren roles específicos');\n        return true;\n      }\n      const hasRequiredRole = requiredRoles.includes(user.role);\n      if (hasRequiredRole) {\n        console.log(' RoleGuard: Usuario tiene el rol requerido');\n        return true;\n      }\n      console.log(' RoleGuard: Usuario no tiene el rol requerido');\n      // Redirigir según el rol del usuario\n      if (user.role === 'admin') {\n        this.router.navigate(['/admin']);\n      } else if (user.role === 'operator') {\n        this.router.navigate(['/admin/operations']);\n      } else {\n        this.router.navigate(['/admin/profile']);\n      }\n      return false;\n    }\n    static {\n      this.ɵfac = function RoleGuard_Factory(t) {\n        return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: RoleGuard,\n        factory: RoleGuard.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return RoleGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}