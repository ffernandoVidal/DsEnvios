{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const requiredRoles = route.data['roles'];\n    const user = this.authService.getCurrentUser();\n    console.log('üë§ RoleGuard: Verificando roles para:', state.url);\n    console.log('üîê Roles requeridos:', requiredRoles);\n    console.log('üë§ Usuario actual:', user);\n    if (!this.authService.isAuthenticated()) {\n      console.log('‚ùå RoleGuard: Usuario no autenticado');\n      this.router.navigate(['/login']);\n      return false;\n    }\n    if (!user) {\n      console.log('‚ùå RoleGuard: No hay datos de usuario');\n      this.router.navigate(['/login']);\n      return false;\n    }\n    if (!requiredRoles || requiredRoles.length === 0) {\n      console.log('‚úÖ RoleGuard: No se requieren roles espec√≠ficos');\n      return true;\n    }\n    const hasRequiredRole = requiredRoles.includes(user.role);\n    if (hasRequiredRole) {\n      console.log('‚úÖ RoleGuard: Usuario tiene el rol requerido');\n      return true;\n    }\n    console.log('‚ùå RoleGuard: Usuario no tiene el rol requerido');\n    // Redirigir seg√∫n el rol del usuario\n    if (user.role === 'admin') {\n      this.router.navigate(['/admin']);\n    } else if (user.role === 'operator') {\n      this.router.navigate(['/admin/operations']);\n    } else {\n      this.router.navigate(['/admin/profile']);\n    }\n    return false;\n  }\n  static {\n    this.…µfac = function RoleGuard_Factory(t) {\n      return new (t || RoleGuard)(i0.…µ…µinject(i1.AuthService), i0.…µ…µinject(i2.Router));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: RoleGuard,\n      factory: RoleGuard.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["RoleGuard","constructor","authService","router","canActivate","route","state","requiredRoles","data","user","getCurrentUser","console","log","url","isAuthenticated","navigate","length","hasRequiredRole","includes","role","i0","…µ…µinject","i1","AuthService","i2","Router","factory","…µfac","providedIn"],"sources":["C:\\Users\\Ferna\\Desktop\\envios\\DsEnvios\\frontend\\src\\app\\guards\\role.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    \r\n    const requiredRoles = route.data['roles'] as Array<string>;\r\n    const user = this.authService.getCurrentUser();\r\n    \r\n    console.log('üë§ RoleGuard: Verificando roles para:', state.url);\r\n    console.log('üîê Roles requeridos:', requiredRoles);\r\n    console.log('üë§ Usuario actual:', user);\r\n    \r\n    if (!this.authService.isAuthenticated()) {\r\n      console.log('‚ùå RoleGuard: Usuario no autenticado');\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n    if (!user) {\r\n      console.log('‚ùå RoleGuard: No hay datos de usuario');\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n\r\n    if (!requiredRoles || requiredRoles.length === 0) {\r\n      console.log('‚úÖ RoleGuard: No se requieren roles espec√≠ficos');\r\n      return true;\r\n    }\r\n\r\n    const hasRequiredRole = requiredRoles.includes(user.role);\r\n    \r\n    if (hasRequiredRole) {\r\n      console.log('‚úÖ RoleGuard: Usuario tiene el rol requerido');\r\n      return true;\r\n    }\r\n\r\n    console.log('‚ùå RoleGuard: Usuario no tiene el rol requerido');\r\n    \r\n    // Redirigir seg√∫n el rol del usuario\r\n    if (user.role === 'admin') {\r\n      this.router.navigate(['/admin']);\r\n    } else if (user.role === 'operator') {\r\n      this.router.navigate(['/admin/operations']);\r\n    } else {\r\n      this.router.navigate(['/admin/profile']);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n}"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAG1B,MAAMC,aAAa,GAAGF,KAAK,CAACG,IAAI,CAAC,OAAO,CAAkB;IAC1D,MAAMC,IAAI,GAAG,IAAI,CAACP,WAAW,CAACQ,cAAc,EAAE;IAE9CC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEN,KAAK,CAACO,GAAG,CAAC;IAC/DF,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEL,aAAa,CAAC;IAClDI,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEH,IAAI,CAAC;IAEvC,IAAI,CAAC,IAAI,CAACP,WAAW,CAACY,eAAe,EAAE,EAAE;MACvCH,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;MAClD,IAAI,CAACT,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAGd,IAAI,CAACN,IAAI,EAAE;MACTE,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnD,IAAI,CAACT,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAGd,IAAI,CAACR,aAAa,IAAIA,aAAa,CAACS,MAAM,KAAK,CAAC,EAAE;MAChDL,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;MAC7D,OAAO,IAAI;;IAGb,MAAMK,eAAe,GAAGV,aAAa,CAACW,QAAQ,CAACT,IAAI,CAACU,IAAI,CAAC;IAEzD,IAAIF,eAAe,EAAE;MACnBN,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;MAC1D,OAAO,IAAI;;IAGbD,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAE7D;IACA,IAAIH,IAAI,CAACU,IAAI,KAAK,OAAO,EAAE;MACzB,IAAI,CAAChB,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;KACjC,MAAM,IAAIN,IAAI,CAACU,IAAI,KAAK,UAAU,EAAE;MACnC,IAAI,CAAChB,MAAM,CAACY,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC;KAC5C,MAAM;MACL,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;;IAG1C,OAAO,KAAK;EACd;;;uBAvDWf,SAAS,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATzB,SAAS;MAAA0B,OAAA,EAAT1B,SAAS,CAAA2B,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}