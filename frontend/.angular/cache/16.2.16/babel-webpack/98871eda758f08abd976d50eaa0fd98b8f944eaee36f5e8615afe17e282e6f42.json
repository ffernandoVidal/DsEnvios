{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3005/api';\n      // Subjects para manejar el estado de autenticación\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.isAuthenticatedSubject = new BehaviorSubject(false);\n      // Observables públicos\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n      // Cargar datos del usuario desde localStorage al inicializar\n      this.loadUserFromStorage();\n    }\n    getHttpOptions() {\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        })\n      };\n    }\n    /**\n     * Realizar login con credenciales\n     */\n    login(username, password) {\n      const loginData = {\n        username,\n        password\n      };\n      console.log('🔐 Iniciando login para usuario:', username);\n      return this.http.post(`${this.apiUrl}/auth/login`, loginData, this.getHttpOptions()).pipe(tap(response => {\n        console.log('📨 Respuesta del servidor:', response);\n        if (response.success && response.user) {\n          this.setCurrentUser(response.user);\n          // Guardar token si existe\n          if (response.token) {\n            localStorage.setItem('authToken', response.token);\n          }\n          console.log('✅ Usuario autenticado correctamente');\n        }\n      }), catchError(error => {\n        console.error('❌ Error en login:', error);\n        this.logout(); // Limpiar cualquier estado previo\n        throw error;\n      }));\n    }\n    /**\n     * Cerrar sesión\n     */\n    logout() {\n      console.log(' Cerrando sesión...');\n      // Limpiar localStorage\n      localStorage.removeItem('currentUser');\n      localStorage.removeItem('authToken');\n      // Limpiar subjects\n      this.currentUserSubject.next(null);\n      this.isAuthenticatedSubject.next(false);\n      console.log('Sesión cerrada');\n    }\n    /**\n     * Verificar si el usuario está autenticado\n     */\n    isAuthenticated() {\n      return this.isAuthenticatedSubject.value;\n    }\n    /**\n     * Obtener el usuario actual\n     */\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    /**\n     * Obtener el token de autenticación\n     */\n    getAuthToken() {\n      return localStorage.getItem('authToken');\n    }\n    /**\n     * Verificar si el usuario tiene un rol específico\n     */\n    hasRole(role) {\n      const user = this.getCurrentUser();\n      return user ? user.role === role : false;\n    }\n    /**\n     * Verificar si el usuario es admin\n     */\n    isAdmin() {\n      return this.hasRole('admin');\n    }\n    /**\n     * Verificar si el usuario es operador\n     */\n    isOperator() {\n      return this.hasRole('operator') || this.hasRole('admin');\n    }\n    /**\n     * Verificar la validez del token en el servidor\n     */\n    validateToken() {\n      const token = this.getAuthToken();\n      if (!token) {\n        return of(false);\n      }\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n      return this.http.get(`${this.apiUrl}/validate-token`, {\n        headers\n      }).pipe(tap(response => {\n        if (response.valid && response.user) {\n          this.setCurrentUser(response.user);\n        } else {\n          this.logout();\n        }\n      }), catchError(error => {\n        console.error('Token inválido:', error);\n        this.logout();\n        return of(false);\n      }));\n    }\n    /**\n     * Establecer el usuario actual\n     */\n    setCurrentUser(user) {\n      // Guardar en localStorage\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      // Actualizar subjects\n      this.currentUserSubject.next(user);\n      this.isAuthenticatedSubject.next(true);\n    }\n    /**\n     * Cargar usuario desde localStorage\n     */\n    loadUserFromStorage() {\n      try {\n        const userData = localStorage.getItem('currentUser');\n        const token = localStorage.getItem('authToken');\n        if (userData && token) {\n          const user = JSON.parse(userData);\n          this.currentUserSubject.next(user);\n          this.isAuthenticatedSubject.next(true);\n          console.log('👤 Usuario cargado desde storage:', user.username);\n          // Validar token en el servidor (opcional)\n          // this.validateToken().subscribe();\n        }\n      } catch (error) {\n        console.error('Error cargando usuario desde storage:', error);\n        this.logout();\n      }\n    }\n    /**\n     * Obtener información del perfil del usuario\n     */\n    getProfile() {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${this.getAuthToken()}`,\n        'Content-Type': 'application/json'\n      });\n      return this.http.get(`${this.apiUrl}/profile`, {\n        headers\n      }).pipe(tap(user => {\n        this.setCurrentUser(user);\n      }), catchError(error => {\n        console.error(' Error obteniendo perfil:', error);\n        throw error;\n      }));\n    }\n    /**\n     * Refrescar el token de autenticación\n     */\n    refreshToken() {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${this.getAuthToken()}`,\n        'Content-Type': 'application/json'\n      });\n      return this.http.post(`${this.apiUrl}/refresh-token`, {}, {\n        headers\n      }).pipe(tap(response => {\n        if (response.token) {\n          localStorage.setItem('authToken', response.token);\n        }\n      }), catchError(error => {\n        console.error(' Error refrescando token:', error);\n        this.logout();\n        throw error;\n      }));\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}