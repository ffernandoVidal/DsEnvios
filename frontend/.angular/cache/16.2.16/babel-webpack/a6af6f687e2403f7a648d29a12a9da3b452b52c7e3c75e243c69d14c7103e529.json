{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\nexport let RealizarEnvioComponent = class RealizarEnvioComponent {\n  constructor(authService, router, http, enviosService) {\n    this.authService = authService;\n    this.router = router;\n    this.http = http;\n    this.enviosService = enviosService;\n    this.subscription = new Subscription();\n    this.apiUrl = 'http://localhost:3005/api';\n    this.currentUser = null;\n    this.isLoading = false;\n    this.isSubmitting = false;\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.currentStep = 1;\n    this.totalSteps = 4;\n    // Datos para la búsqueda de direcciones frecuentes\n    this.searchTerm = '';\n    this.frequentAddresses = [];\n    this.showFrequentAddresses = false;\n    // Formulario principal\n    this.shipmentForm = {\n      destinatario: {\n        nombre: '',\n        email: '',\n        referencia: '',\n        poblado: '',\n        municipio: '',\n        departamento: '',\n        colonia: '',\n        residenciaBarrio: '',\n        telefono: '',\n        instruccionesEspeciales: '',\n        direccionExacta: '',\n        nombreContacto: ''\n      },\n      metodoPago: {\n        tipo: 'contra_entrega',\n        cargoAdicional: 4.00\n      },\n      paquete: {\n        tipo: '',\n        peso: 0,\n        dimensiones: {\n          largo: 0,\n          ancho: 0,\n          alto: 0\n        },\n        descripcion: '',\n        valorDeclarado: 0,\n        fragil: false\n      },\n      costoTotal: 0,\n      codigoGuia: ''\n    };\n    // Opciones para los selectores\n    this.referenciaOpciones = [{\n      value: 'casa',\n      label: 'Casa'\n    }, {\n      value: 'trabajo',\n      label: 'Trabajo'\n    }, {\n      value: 'gimnasio',\n      label: 'Gimnasio'\n    }, {\n      value: 'escuela',\n      label: 'Escuela'\n    }];\n    this.metodoPagoOpciones = [{\n      value: 'contra_entrega',\n      label: 'Cobro contra entrega',\n      cargo: 4.00,\n      descripcion: 'Q. 4.00 de cargos adicionales'\n    }, {\n      value: 'mi_cuenta',\n      label: 'Cobro a mi cuenta',\n      cargo: 0,\n      descripcion: 'Sin cargos adicionales'\n    }, {\n      value: 'tarjeta',\n      label: 'Pago con tarjeta de crédito o débito',\n      cargo: 0,\n      descripcion: 'Pago inmediato'\n    }];\n    this.tiposPaquete = [{\n      value: 'sobres',\n      label: 'Sobres (hasta 500g)',\n      maxPeso: 0.5,\n      precio: 15\n    }, {\n      value: 'paquete_pequeno',\n      label: 'Paquete Pequeño (hasta 2kg)',\n      maxPeso: 2,\n      precio: 25\n    }, {\n      value: 'paquete_mediano',\n      label: 'Paquete Mediano (hasta 5kg)',\n      maxPeso: 5,\n      precio: 35\n    }, {\n      value: 'paquete_grande',\n      label: 'Paquete Grande (hasta 10kg)',\n      maxPeso: 10,\n      precio: 50\n    }, {\n      value: 'paquete_extra',\n      label: 'Paquete Extra Grande (hasta 25kg)',\n      maxPeso: 25,\n      precio: 75\n    }];\n    // Datos de ubicaciones (como en cotizar envíos)\n    this.departamentos = [{\n      departamento: 'Guatemala',\n      municipios: ['Guatemala', 'Mixco', 'Villa Nueva', 'San José Pinula', 'Santa Catarina Pinula'],\n      poblados: {\n        'Guatemala': ['Zona 1', 'Zona 4', 'Zona 9', 'Zona 10', 'Zona 11', 'Zona 13', 'Zona 14', 'Zona 15'],\n        'Mixco': ['Zona 1 de Mixco', 'Zona 3 de Mixco', 'Zona 6 de Mixco', 'Las Brisas', 'El Mirador']\n      }\n    }, {\n      departamento: 'Sacatepéquez',\n      municipios: ['Antigua Guatemala', 'Chimaltenango', 'San Lucas Sacatepéquez'],\n      poblados: {\n        'Antigua Guatemala': ['Centro Histórico', 'San Pedro Las Huertas', 'Santa Ana'],\n        'San Lucas Sacatepéquez': ['Centro', 'Carretera a El Salvador']\n      }\n    }\n    // Agregar más departamentos según sea necesario\n    ];\n    // Variables para los selectores dependientes\n    this.municipiosDisponibles = [];\n    this.pobladosDisponibles = [];\n  }\n  ngOnInit() {\n    this.loadUserData();\n    this.loadFrequentAddresses();\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  loadUserData() {\n    this.subscription.add(this.authService.currentUser$.subscribe(user => {\n      this.currentUser = user;\n    }));\n  }\n  // Cargar direcciones frecuentes del usuario\n  loadFrequentAddresses() {\n    this.isLoading = true;\n    this.subscription.add(this.http.get(`${this.apiUrl}/frequent-addresses`).subscribe({\n      next: response => {\n        if (response.success) {\n          this.frequentAddresses = response.data;\n        }\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Error loading frequent addresses:', error);\n        this.isLoading = false;\n      }\n    }));\n  }\n  // Buscar en direcciones frecuentes\n  onSearchFrequentAddresses() {\n    if (this.searchTerm.length >= 2) {\n      this.showFrequentAddresses = true;\n    } else {\n      this.showFrequentAddresses = false;\n    }\n  }\n  // Filtrar direcciones frecuentes\n  getFilteredFrequentAddresses() {\n    if (!this.searchTerm) return this.frequentAddresses;\n    const term = this.searchTerm.toLowerCase();\n    return this.frequentAddresses.filter(addr => addr.name.toLowerCase().includes(term) || addr.department.toLowerCase().includes(term) || addr.municipality.toLowerCase().includes(term) || addr.exactAddress.toLowerCase().includes(term));\n  }\n  // Seleccionar dirección frecuente\n  selectFrequentAddress(address) {\n    this.shipmentForm.destinatario = {\n      nombre: address.name,\n      email: address.email,\n      referencia: address.reference,\n      poblado: address.poblado,\n      municipio: address.municipality,\n      departamento: address.department,\n      colonia: address.colonia,\n      residenciaBarrio: '',\n      telefono: address.phone,\n      instruccionesEspeciales: address.specialInstructions || '',\n      direccionExacta: address.exactAddress,\n      nombreContacto: address.contactName\n    };\n    this.updateMunicipios();\n    this.updatePoblados();\n    this.showFrequentAddresses = false;\n    this.searchTerm = '';\n    // Incrementar contador de uso\n    this.incrementAddressUsage(address.id);\n  }\n  incrementAddressUsage(addressId) {\n    this.http.patch(`${this.apiUrl}/frequent-addresses/${addressId}/increment`, {}).subscribe();\n  }\n  // Manejar cambios en departamento\n  onDepartamentoChange() {\n    this.shipmentForm.destinatario.municipio = '';\n    this.shipmentForm.destinatario.poblado = '';\n    this.updateMunicipios();\n    this.pobladosDisponibles = [];\n  }\n  // Manejar cambios en municipio\n  onMunicipioChange() {\n    this.shipmentForm.destinatario.poblado = '';\n    this.updatePoblados();\n  }\n  updateMunicipios() {\n    const dept = this.departamentos.find(d => d.departamento === this.shipmentForm.destinatario.departamento);\n    this.municipiosDisponibles = dept ? dept.municipios : [];\n  }\n  updatePoblados() {\n    const dept = this.departamentos.find(d => d.departamento === this.shipmentForm.destinatario.departamento);\n    if (dept && dept.poblados) {\n      this.pobladosDisponibles = dept.poblados[this.shipmentForm.destinatario.municipio] || [];\n    } else {\n      this.pobladosDisponibles = [];\n    }\n  }\n  // Manejar cambio de método de pago\n  onMetodoPagoChange() {\n    const metodo = this.metodoPagoOpciones.find(m => m.value === this.shipmentForm.metodoPago.tipo);\n    this.shipmentForm.metodoPago.cargoAdicional = metodo ? metodo.cargo : 0;\n    this.calcularCostoTotal();\n  }\n  // Manejar cambio de tipo de paquete\n  onTipoPaqueteChange() {\n    const tipo = this.tiposPaquete.find(t => t.value === this.shipmentForm.paquete.tipo);\n    if (tipo && this.shipmentForm.paquete.peso > tipo.maxPeso) {\n      this.shipmentForm.paquete.peso = tipo.maxPeso;\n    }\n    this.calcularCostoTotal();\n  }\n  // Calcular costo total del envío\n  calcularCostoTotal() {\n    let costoBase = 0;\n    // Obtener precio base según tipo de paquete\n    const tipoPaquete = this.tiposPaquete.find(t => t.value === this.shipmentForm.paquete.tipo);\n    if (tipoPaquete) {\n      costoBase = tipoPaquete.precio;\n    }\n    // Agregar cargos adicionales por método de pago\n    const cargosPago = this.shipmentForm.metodoPago.cargoAdicional;\n    // Calcular recargo por peso extra si aplica\n    let recargosPeso = 0;\n    if (tipoPaquete && this.shipmentForm.paquete.peso > tipoPaquete.maxPeso) {\n      const pesoExtra = this.shipmentForm.paquete.peso - tipoPaquete.maxPeso;\n      recargosPeso = pesoExtra * 5; // Q5 por kg extra\n    }\n\n    this.shipmentForm.costoTotal = costoBase + cargosPago + recargosPeso;\n  }\n  // Navegación entre pasos\n  nextStep() {\n    if (this.validateCurrentStep()) {\n      if (this.currentStep < this.totalSteps) {\n        this.currentStep++;\n        if (this.currentStep === 4) {\n          this.calcularCostoTotal();\n          this.generateGuiaCode();\n        }\n        this.clearMessages();\n      }\n    }\n  }\n  prevStep() {\n    if (this.currentStep > 1) {\n      this.currentStep--;\n      this.clearMessages();\n    }\n  }\n  goToStep(step) {\n    if (step >= 1 && step <= this.totalSteps) {\n      this.currentStep = step;\n      this.clearMessages();\n    }\n  }\n  // Validaciones por paso\n  validateCurrentStep() {\n    this.clearMessages();\n    switch (this.currentStep) {\n      case 1:\n        return this.validateDestinatario();\n      case 2:\n        return this.validateMetodoPago();\n      case 3:\n        return this.validatePaquete();\n      case 4:\n        return true;\n      // Resumen, no necesita validación adicional\n      default:\n        return false;\n    }\n  }\n  validateDestinatario() {\n    const dest = this.shipmentForm.destinatario;\n    if (!dest.nombre.trim()) {\n      this.errorMessage = 'El nombre es obligatorio';\n      return false;\n    }\n    if (!dest.email.trim() || !this.isValidEmail(dest.email)) {\n      this.errorMessage = 'El correo electrónico es obligatorio y debe ser válido';\n      return false;\n    }\n    if (!dest.referencia) {\n      this.errorMessage = 'La referencia es obligatoria';\n      return false;\n    }\n    if (!dest.departamento) {\n      this.errorMessage = 'El departamento es obligatorio';\n      return false;\n    }\n    if (!dest.telefono.trim()) {\n      this.errorMessage = 'El número de teléfono es obligatorio';\n      return false;\n    }\n    if (!dest.direccionExacta.trim()) {\n      this.errorMessage = 'La dirección exacta es obligatoria';\n      return false;\n    }\n    return true;\n  }\n  validateMetodoPago() {\n    if (!this.shipmentForm.metodoPago.tipo) {\n      this.errorMessage = 'Debe seleccionar un método de pago';\n      return false;\n    }\n    return true;\n  }\n  validatePaquete() {\n    const paq = this.shipmentForm.paquete;\n    if (!paq.tipo) {\n      this.errorMessage = 'Debe seleccionar un tipo de paquete';\n      return false;\n    }\n    if (paq.peso <= 0) {\n      this.errorMessage = 'El peso debe ser mayor a 0';\n      return false;\n    }\n    if (!paq.descripcion.trim()) {\n      this.errorMessage = 'La descripción del paquete es obligatoria';\n      return false;\n    }\n    if (paq.valorDeclarado <= 0) {\n      this.errorMessage = 'El valor declarado debe ser mayor a 0';\n      return false;\n    }\n    return true;\n  }\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  // Generar código de guía único\n  generateGuiaCode() {\n    const prefix = 'DSE';\n    const timestamp = Date.now().toString().slice(-6);\n    const random = Math.random().toString(36).substr(2, 4).toUpperCase();\n    this.shipmentForm.codigoGuia = `${prefix}${timestamp}${random}`;\n  }\n  // Guardar dirección como frecuente\n  saveAsFrequentAddress() {\n    const dest = this.shipmentForm.destinatario;\n    const frequentAddress = {\n      name: dest.nombre,\n      email: dest.email,\n      phone: dest.telefono,\n      reference: dest.referencia,\n      department: dest.departamento,\n      municipality: dest.municipio,\n      poblado: dest.poblado,\n      colonia: dest.colonia,\n      exactAddress: dest.direccionExacta,\n      contactName: dest.nombreContacto,\n      specialInstructions: dest.instruccionesEspeciales\n    };\n    this.subscription.add(this.http.post(`${this.apiUrl}/frequent-addresses`, frequentAddress).subscribe({\n      next: response => {\n        if (response.success) {\n          this.successMessage = 'Dirección guardada como frecuente';\n          this.loadFrequentAddresses(); // Recargar lista\n        }\n      },\n\n      error: error => {\n        console.error('Error saving frequent address:', error);\n      }\n    }));\n  }\n  // Envío final del formulario\n  onSubmit() {\n    if (!this.validateCurrentStep()) {\n      return;\n    }\n    this.isSubmitting = true;\n    this.clearMessages();\n    const shipmentData = {\n      destinatario: this.shipmentForm.destinatario,\n      metodoPago: this.shipmentForm.metodoPago,\n      paquete: this.shipmentForm.paquete,\n      costoTotal: this.shipmentForm.costoTotal,\n      codigoGuia: this.shipmentForm.codigoGuia,\n      createdBy: this.currentUser?.id\n    };\n    this.subscription.add(this.http.post(`${this.apiUrl}/shipments`, shipmentData).subscribe({\n      next: response => {\n        this.isSubmitting = false;\n        if (response.success) {\n          this.successMessage = `¡Envío creado exitosamente! Código de guía: ${this.shipmentForm.codigoGuia}`;\n          // Generar PDF automáticamente\n          this.generatePDF();\n          setTimeout(() => {\n            this.router.navigate(['/rastreo'], {\n              queryParams: {\n                codigo: this.shipmentForm.codigoGuia\n              }\n            });\n          }, 3000);\n        } else {\n          this.errorMessage = response.message || 'Error al crear el envío';\n        }\n      },\n      error: error => {\n        this.isSubmitting = false;\n        this.errorMessage = 'Error interno del servidor. Intenta nuevamente.';\n        console.error('Error creating shipment:', error);\n      }\n    }));\n  }\n  // Generar PDF de la guía\n  generatePDF() {\n    // Esta función se implementará para generar el PDF con todos los datos\n    console.log('Generando PDF para guía:', this.shipmentForm.codigoGuia);\n    // Aquí se implementaría la lógica para generar el PDF\n    // Puede usar librerías como jsPDF o llamar a un endpoint del backend\n  }\n  // Utilidades\n  clearMessages() {\n    this.errorMessage = '';\n    this.successMessage = '';\n  }\n  resetForm() {\n    this.currentStep = 1;\n    this.shipmentForm = {\n      destinatario: {\n        nombre: '',\n        email: '',\n        referencia: '',\n        poblado: '',\n        municipio: '',\n        departamento: '',\n        colonia: '',\n        residenciaBarrio: '',\n        telefono: '',\n        instruccionesEspeciales: '',\n        direccionExacta: '',\n        nombreContacto: ''\n      },\n      metodoPago: {\n        tipo: 'contra_entrega',\n        cargoAdicional: 4.00\n      },\n      paquete: {\n        tipo: '',\n        peso: 0,\n        dimensiones: {\n          largo: 0,\n          ancho: 0,\n          alto: 0\n        },\n        descripcion: '',\n        valorDeclarado: 0,\n        fragil: false\n      },\n      costoTotal: 0,\n      codigoGuia: ''\n    };\n    this.clearMessages();\n  }\n  getStepTitle(step) {\n    const titles = {\n      1: 'Información del Destinatario',\n      2: 'Método de Pago',\n      3: 'Detalles del Paquete',\n      4: 'Resumen y Confirmación'\n    };\n    return titles[step] || 'Paso';\n  }\n  // Función para obtener el precio máximo permitido por tipo de paquete\n  getMaxWeightForPackageType(tipo) {\n    const paquete = this.tiposPaquete.find(p => p.value === tipo);\n    return paquete ? paquete.maxPeso : 0;\n  }\n  // Función para validar que el peso no exceda el máximo\n  validateWeight() {\n    const maxWeight = this.getMaxWeightForPackageType(this.shipmentForm.paquete.tipo);\n    return this.shipmentForm.paquete.peso <= maxWeight;\n  }\n};\nRealizarEnvioComponent = __decorate([Component({\n  selector: 'app-realizar-envio',\n  templateUrl: './realizar-envio.component.html',\n  styleUrls: ['./realizar-envio.component.css']\n})], RealizarEnvioComponent);","map":{"version":3,"names":["Component","Subscription","RealizarEnvioComponent","constructor","authService","router","http","enviosService","subscription","apiUrl","currentUser","isLoading","isSubmitting","errorMessage","successMessage","currentStep","totalSteps","searchTerm","frequentAddresses","showFrequentAddresses","shipmentForm","destinatario","nombre","email","referencia","poblado","municipio","departamento","colonia","residenciaBarrio","telefono","instruccionesEspeciales","direccionExacta","nombreContacto","metodoPago","tipo","cargoAdicional","paquete","peso","dimensiones","largo","ancho","alto","descripcion","valorDeclarado","fragil","costoTotal","codigoGuia","referenciaOpciones","value","label","metodoPagoOpciones","cargo","tiposPaquete","maxPeso","precio","departamentos","municipios","poblados","municipiosDisponibles","pobladosDisponibles","ngOnInit","loadUserData","loadFrequentAddresses","ngOnDestroy","unsubscribe","add","currentUser$","subscribe","user","get","next","response","success","data","error","console","onSearchFrequentAddresses","length","getFilteredFrequentAddresses","term","toLowerCase","filter","addr","name","includes","department","municipality","exactAddress","selectFrequentAddress","address","reference","phone","specialInstructions","contactName","updateMunicipios","updatePoblados","incrementAddressUsage","id","addressId","patch","onDepartamentoChange","onMunicipioChange","dept","find","d","onMetodoPagoChange","metodo","m","calcularCostoTotal","onTipoPaqueteChange","t","costoBase","tipoPaquete","cargosPago","recargosPeso","pesoExtra","nextStep","validateCurrentStep","generateGuiaCode","clearMessages","prevStep","goToStep","step","validateDestinatario","validateMetodoPago","validatePaquete","dest","trim","isValidEmail","paq","emailRegex","test","prefix","timestamp","Date","now","toString","slice","random","Math","substr","toUpperCase","saveAsFrequentAddress","frequentAddress","post","onSubmit","shipmentData","createdBy","generatePDF","setTimeout","navigate","queryParams","codigo","message","log","resetForm","getStepTitle","titles","getMaxWeightForPackageType","p","validateWeight","maxWeight","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Ferna\\Desktop\\envios\\DsEnvios\\frontend\\src\\app\\components\\realizar-envio\\realizar-envio.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { EnviosService, FrequentAddress, PaymentMethod, PackageType, NewShipmentForm, LocationData } from '../../services/envios.service';\r\n\r\ninterface User {\r\n  id: string;\r\n  username: string;\r\n  name: string;\r\n  role: string;\r\n  email: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-realizar-envio',\r\n  templateUrl: './realizar-envio.component.html',\r\n  styleUrls: ['./realizar-envio.component.css']\r\n})\r\nexport class RealizarEnvioComponent implements OnInit, OnDestroy {\r\n  private subscription: Subscription = new Subscription();\r\n  private apiUrl = 'http://localhost:3005/api';\r\n  \r\n  currentUser: User | null = null;\r\n  isLoading = false;\r\n  isSubmitting = false;\r\n  errorMessage = '';\r\n  successMessage = '';\r\n  currentStep = 1;\r\n  totalSteps = 4;\r\n\r\n  // Datos para la búsqueda de direcciones frecuentes\r\n  searchTerm = '';\r\n  frequentAddresses: FrequentAddress[] = [];\r\n  showFrequentAddresses = false;\r\n  \r\n  // Formulario principal\r\n  shipmentForm: NewShipmentForm = {\r\n    destinatario: {\r\n      nombre: '',\r\n      email: '',\r\n      referencia: '',\r\n      poblado: '',\r\n      municipio: '',\r\n      departamento: '',\r\n      colonia: '',\r\n      residenciaBarrio: '',\r\n      telefono: '',\r\n      instruccionesEspeciales: '',\r\n      direccionExacta: '',\r\n      nombreContacto: ''\r\n    },\r\n    metodoPago: {\r\n      tipo: 'contra_entrega',\r\n      cargoAdicional: 4.00\r\n    },\r\n    paquete: {\r\n      tipo: '',\r\n      peso: 0,\r\n      dimensiones: {\r\n        largo: 0,\r\n        ancho: 0,\r\n        alto: 0\r\n      },\r\n      descripcion: '',\r\n      valorDeclarado: 0,\r\n      fragil: false\r\n    },\r\n    costoTotal: 0,\r\n    codigoGuia: ''\r\n  };\r\n  \r\n  // Opciones para los selectores\r\n  referenciaOpciones = [\r\n    { value: 'casa', label: 'Casa' },\r\n    { value: 'trabajo', label: 'Trabajo' },\r\n    { value: 'gimnasio', label: 'Gimnasio' },\r\n    { value: 'escuela', label: 'Escuela' }\r\n  ];\r\n  \r\n  metodoPagoOpciones = [\r\n    { \r\n      value: 'contra_entrega', \r\n      label: 'Cobro contra entrega', \r\n      cargo: 4.00,\r\n      descripcion: 'Q. 4.00 de cargos adicionales' \r\n    },\r\n    { \r\n      value: 'mi_cuenta', \r\n      label: 'Cobro a mi cuenta', \r\n      cargo: 0,\r\n      descripcion: 'Sin cargos adicionales' \r\n    },\r\n    { \r\n      value: 'tarjeta', \r\n      label: 'Pago con tarjeta de crédito o débito', \r\n      cargo: 0,\r\n      descripcion: 'Pago inmediato' \r\n    }\r\n  ];\r\n  \r\n  tiposPaquete = [\r\n    { value: 'sobres', label: 'Sobres (hasta 500g)', maxPeso: 0.5, precio: 15 },\r\n    { value: 'paquete_pequeno', label: 'Paquete Pequeño (hasta 2kg)', maxPeso: 2, precio: 25 },\r\n    { value: 'paquete_mediano', label: 'Paquete Mediano (hasta 5kg)', maxPeso: 5, precio: 35 },\r\n    { value: 'paquete_grande', label: 'Paquete Grande (hasta 10kg)', maxPeso: 10, precio: 50 },\r\n    { value: 'paquete_extra', label: 'Paquete Extra Grande (hasta 25kg)', maxPeso: 25, precio: 75 }\r\n  ];\r\n  \r\n  // Datos de ubicaciones (como en cotizar envíos)\r\n  departamentos: LocationData[] = [\r\n    {\r\n      departamento: 'Guatemala',\r\n      municipios: ['Guatemala', 'Mixco', 'Villa Nueva', 'San José Pinula', 'Santa Catarina Pinula'],\r\n      poblados: {\r\n        'Guatemala': ['Zona 1', 'Zona 4', 'Zona 9', 'Zona 10', 'Zona 11', 'Zona 13', 'Zona 14', 'Zona 15'],\r\n        'Mixco': ['Zona 1 de Mixco', 'Zona 3 de Mixco', 'Zona 6 de Mixco', 'Las Brisas', 'El Mirador']\r\n      }\r\n    },\r\n    {\r\n      departamento: 'Sacatepéquez',\r\n      municipios: ['Antigua Guatemala', 'Chimaltenango', 'San Lucas Sacatepéquez'],\r\n      poblados: {\r\n        'Antigua Guatemala': ['Centro Histórico', 'San Pedro Las Huertas', 'Santa Ana'],\r\n        'San Lucas Sacatepéquez': ['Centro', 'Carretera a El Salvador']\r\n      }\r\n    }\r\n    // Agregar más departamentos según sea necesario\r\n  ];\r\n  \r\n  // Variables para los selectores dependientes\r\n  municipiosDisponibles: string[] = [];\r\n  pobladosDisponibles: string[] = [];\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private http: HttpClient,\r\n    private enviosService: EnviosService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadUserData();\r\n    this.loadFrequentAddresses();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  private loadUserData(): void {\r\n    this.subscription.add(\r\n      this.authService.currentUser$.subscribe(user => {\r\n        this.currentUser = user;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Cargar direcciones frecuentes del usuario\r\n  private loadFrequentAddresses(): void {\r\n    this.isLoading = true;\r\n    this.subscription.add(\r\n      this.http.get<{success: boolean, data: FrequentAddress[]}>(`${this.apiUrl}/frequent-addresses`).subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.frequentAddresses = response.data;\r\n          }\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading frequent addresses:', error);\r\n          this.isLoading = false;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Buscar en direcciones frecuentes\r\n  onSearchFrequentAddresses(): void {\r\n    if (this.searchTerm.length >= 2) {\r\n      this.showFrequentAddresses = true;\r\n    } else {\r\n      this.showFrequentAddresses = false;\r\n    }\r\n  }\r\n\r\n  // Filtrar direcciones frecuentes\r\n  getFilteredFrequentAddresses(): FrequentAddress[] {\r\n    if (!this.searchTerm) return this.frequentAddresses;\r\n    \r\n    const term = this.searchTerm.toLowerCase();\r\n    return this.frequentAddresses.filter(addr => \r\n      addr.name.toLowerCase().includes(term) ||\r\n      addr.department.toLowerCase().includes(term) ||\r\n      addr.municipality.toLowerCase().includes(term) ||\r\n      addr.exactAddress.toLowerCase().includes(term)\r\n    );\r\n  }\r\n\r\n  // Seleccionar dirección frecuente\r\n  selectFrequentAddress(address: FrequentAddress): void {\r\n    this.shipmentForm.destinatario = {\r\n      nombre: address.name,\r\n      email: address.email,\r\n      referencia: address.reference,\r\n      poblado: address.poblado,\r\n      municipio: address.municipality,\r\n      departamento: address.department,\r\n      colonia: address.colonia,\r\n      residenciaBarrio: '',\r\n      telefono: address.phone,\r\n      instruccionesEspeciales: address.specialInstructions || '',\r\n      direccionExacta: address.exactAddress,\r\n      nombreContacto: address.contactName\r\n    };\r\n    \r\n    this.updateMunicipios();\r\n    this.updatePoblados();\r\n    this.showFrequentAddresses = false;\r\n    this.searchTerm = '';\r\n    \r\n    // Incrementar contador de uso\r\n    this.incrementAddressUsage(address.id);\r\n  }\r\n\r\n  private incrementAddressUsage(addressId: string): void {\r\n    this.http.patch(`${this.apiUrl}/frequent-addresses/${addressId}/increment`, {}).subscribe();\r\n  }\r\n\r\n  // Manejar cambios en departamento\r\n  onDepartamentoChange(): void {\r\n    this.shipmentForm.destinatario.municipio = '';\r\n    this.shipmentForm.destinatario.poblado = '';\r\n    this.updateMunicipios();\r\n    this.pobladosDisponibles = [];\r\n  }\r\n\r\n  // Manejar cambios en municipio\r\n  onMunicipioChange(): void {\r\n    this.shipmentForm.destinatario.poblado = '';\r\n    this.updatePoblados();\r\n  }\r\n\r\n  private updateMunicipios(): void {\r\n    const dept = this.departamentos.find(d => d.departamento === this.shipmentForm.destinatario.departamento);\r\n    this.municipiosDisponibles = dept ? dept.municipios : [];\r\n  }\r\n\r\n  private updatePoblados(): void {\r\n    const dept = this.departamentos.find(d => d.departamento === this.shipmentForm.destinatario.departamento);\r\n    if (dept && dept.poblados) {\r\n      this.pobladosDisponibles = dept.poblados[this.shipmentForm.destinatario.municipio] || [];\r\n    } else {\r\n      this.pobladosDisponibles = [];\r\n    }\r\n  }\r\n\r\n  // Manejar cambio de método de pago\r\n  onMetodoPagoChange(): void {\r\n    const metodo = this.metodoPagoOpciones.find(m => m.value === this.shipmentForm.metodoPago.tipo);\r\n    this.shipmentForm.metodoPago.cargoAdicional = metodo ? metodo.cargo : 0;\r\n    this.calcularCostoTotal();\r\n  }\r\n\r\n  // Manejar cambio de tipo de paquete\r\n  onTipoPaqueteChange(): void {\r\n    const tipo = this.tiposPaquete.find(t => t.value === this.shipmentForm.paquete.tipo);\r\n    if (tipo && this.shipmentForm.paquete.peso > tipo.maxPeso) {\r\n      this.shipmentForm.paquete.peso = tipo.maxPeso;\r\n    }\r\n    this.calcularCostoTotal();\r\n  }\r\n\r\n  // Calcular costo total del envío\r\n  calcularCostoTotal(): void {\r\n    let costoBase = 0;\r\n    \r\n    // Obtener precio base según tipo de paquete\r\n    const tipoPaquete = this.tiposPaquete.find(t => t.value === this.shipmentForm.paquete.tipo);\r\n    if (tipoPaquete) {\r\n      costoBase = tipoPaquete.precio;\r\n    }\r\n    \r\n    // Agregar cargos adicionales por método de pago\r\n    const cargosPago = this.shipmentForm.metodoPago.cargoAdicional;\r\n    \r\n    // Calcular recargo por peso extra si aplica\r\n    let recargosPeso = 0;\r\n    if (tipoPaquete && this.shipmentForm.paquete.peso > tipoPaquete.maxPeso) {\r\n      const pesoExtra = this.shipmentForm.paquete.peso - tipoPaquete.maxPeso;\r\n      recargosPeso = pesoExtra * 5; // Q5 por kg extra\r\n    }\r\n    \r\n    this.shipmentForm.costoTotal = costoBase + cargosPago + recargosPeso;\r\n  }\r\n\r\n  // Navegación entre pasos\r\n  nextStep(): void {\r\n    if (this.validateCurrentStep()) {\r\n      if (this.currentStep < this.totalSteps) {\r\n        this.currentStep++;\r\n        if (this.currentStep === 4) {\r\n          this.calcularCostoTotal();\r\n          this.generateGuiaCode();\r\n        }\r\n        this.clearMessages();\r\n      }\r\n    }\r\n  }\r\n\r\n  prevStep(): void {\r\n    if (this.currentStep > 1) {\r\n      this.currentStep--;\r\n      this.clearMessages();\r\n    }\r\n  }\r\n\r\n  goToStep(step: number): void {\r\n    if (step >= 1 && step <= this.totalSteps) {\r\n      this.currentStep = step;\r\n      this.clearMessages();\r\n    }\r\n  }\r\n\r\n  // Validaciones por paso\r\n  validateCurrentStep(): boolean {\r\n    this.clearMessages();\r\n    \r\n    switch (this.currentStep) {\r\n      case 1:\r\n        return this.validateDestinatario();\r\n      case 2:\r\n        return this.validateMetodoPago();\r\n      case 3:\r\n        return this.validatePaquete();\r\n      case 4:\r\n        return true; // Resumen, no necesita validación adicional\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  private validateDestinatario(): boolean {\r\n    const dest = this.shipmentForm.destinatario;\r\n    \r\n    if (!dest.nombre.trim()) {\r\n      this.errorMessage = 'El nombre es obligatorio';\r\n      return false;\r\n    }\r\n    \r\n    if (!dest.email.trim() || !this.isValidEmail(dest.email)) {\r\n      this.errorMessage = 'El correo electrónico es obligatorio y debe ser válido';\r\n      return false;\r\n    }\r\n    \r\n    if (!dest.referencia) {\r\n      this.errorMessage = 'La referencia es obligatoria';\r\n      return false;\r\n    }\r\n    \r\n    if (!dest.departamento) {\r\n      this.errorMessage = 'El departamento es obligatorio';\r\n      return false;\r\n    }\r\n    \r\n    if (!dest.telefono.trim()) {\r\n      this.errorMessage = 'El número de teléfono es obligatorio';\r\n      return false;\r\n    }\r\n    \r\n    if (!dest.direccionExacta.trim()) {\r\n      this.errorMessage = 'La dirección exacta es obligatoria';\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  private validateMetodoPago(): boolean {\r\n    if (!this.shipmentForm.metodoPago.tipo) {\r\n      this.errorMessage = 'Debe seleccionar un método de pago';\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private validatePaquete(): boolean {\r\n    const paq = this.shipmentForm.paquete;\r\n    \r\n    if (!paq.tipo) {\r\n      this.errorMessage = 'Debe seleccionar un tipo de paquete';\r\n      return false;\r\n    }\r\n    \r\n    if (paq.peso <= 0) {\r\n      this.errorMessage = 'El peso debe ser mayor a 0';\r\n      return false;\r\n    }\r\n    \r\n    if (!paq.descripcion.trim()) {\r\n      this.errorMessage = 'La descripción del paquete es obligatoria';\r\n      return false;\r\n    }\r\n    \r\n    if (paq.valorDeclarado <= 0) {\r\n      this.errorMessage = 'El valor declarado debe ser mayor a 0';\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  private isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  // Generar código de guía único\r\n  private generateGuiaCode(): void {\r\n    const prefix = 'DSE';\r\n    const timestamp = Date.now().toString().slice(-6);\r\n    const random = Math.random().toString(36).substr(2, 4).toUpperCase();\r\n    this.shipmentForm.codigoGuia = `${prefix}${timestamp}${random}`;\r\n  }\r\n\r\n  // Guardar dirección como frecuente\r\n  saveAsFrequentAddress(): void {\r\n    const dest = this.shipmentForm.destinatario;\r\n    const frequentAddress = {\r\n      name: dest.nombre,\r\n      email: dest.email,\r\n      phone: dest.telefono,\r\n      reference: dest.referencia,\r\n      department: dest.departamento,\r\n      municipality: dest.municipio,\r\n      poblado: dest.poblado,\r\n      colonia: dest.colonia,\r\n      exactAddress: dest.direccionExacta,\r\n      contactName: dest.nombreContacto,\r\n      specialInstructions: dest.instruccionesEspeciales\r\n    };\r\n    \r\n    this.subscription.add(\r\n      this.http.post(`${this.apiUrl}/frequent-addresses`, frequentAddress).subscribe({\r\n        next: (response: any) => {\r\n          if (response.success) {\r\n            this.successMessage = 'Dirección guardada como frecuente';\r\n            this.loadFrequentAddresses(); // Recargar lista\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Error saving frequent address:', error);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Envío final del formulario\r\n  onSubmit(): void {\r\n    if (!this.validateCurrentStep()) {\r\n      return;\r\n    }\r\n    \r\n    this.isSubmitting = true;\r\n    this.clearMessages();\r\n    \r\n    const shipmentData = {\r\n      destinatario: this.shipmentForm.destinatario,\r\n      metodoPago: this.shipmentForm.metodoPago,\r\n      paquete: this.shipmentForm.paquete,\r\n      costoTotal: this.shipmentForm.costoTotal,\r\n      codigoGuia: this.shipmentForm.codigoGuia,\r\n      createdBy: this.currentUser?.id\r\n    };\r\n    \r\n    this.subscription.add(\r\n      this.http.post(`${this.apiUrl}/shipments`, shipmentData).subscribe({\r\n        next: (response: any) => {\r\n          this.isSubmitting = false;\r\n          \r\n          if (response.success) {\r\n            this.successMessage = `¡Envío creado exitosamente! Código de guía: ${this.shipmentForm.codigoGuia}`;\r\n            \r\n            // Generar PDF automáticamente\r\n            this.generatePDF();\r\n            \r\n            setTimeout(() => {\r\n              this.router.navigate(['/rastreo'], { \r\n                queryParams: { codigo: this.shipmentForm.codigoGuia } \r\n              });\r\n            }, 3000);\r\n          } else {\r\n            this.errorMessage = response.message || 'Error al crear el envío';\r\n          }\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          this.isSubmitting = false;\r\n          this.errorMessage = 'Error interno del servidor. Intenta nuevamente.';\r\n          console.error('Error creating shipment:', error);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  // Generar PDF de la guía\r\n  generatePDF(): void {\r\n    // Esta función se implementará para generar el PDF con todos los datos\r\n    console.log('Generando PDF para guía:', this.shipmentForm.codigoGuia);\r\n    \r\n    // Aquí se implementaría la lógica para generar el PDF\r\n    // Puede usar librerías como jsPDF o llamar a un endpoint del backend\r\n  }\r\n\r\n  // Utilidades\r\n  private clearMessages(): void {\r\n    this.errorMessage = '';\r\n    this.successMessage = '';\r\n  }\r\n\r\n  resetForm(): void {\r\n    this.currentStep = 1;\r\n    this.shipmentForm = {\r\n      destinatario: {\r\n        nombre: '', email: '', referencia: '', poblado: '', municipio: '', \r\n        departamento: '', colonia: '', residenciaBarrio: '', telefono: '', \r\n        instruccionesEspeciales: '', direccionExacta: '', nombreContacto: ''\r\n      },\r\n      metodoPago: { tipo: 'contra_entrega', cargoAdicional: 4.00 },\r\n      paquete: {\r\n        tipo: '', peso: 0, dimensiones: { largo: 0, ancho: 0, alto: 0 },\r\n        descripcion: '', valorDeclarado: 0, fragil: false\r\n      },\r\n      costoTotal: 0, codigoGuia: ''\r\n    };\r\n    this.clearMessages();\r\n  }\r\n\r\n  getStepTitle(step: number): string {\r\n    const titles = {\r\n      1: 'Información del Destinatario',\r\n      2: 'Método de Pago',\r\n      3: 'Detalles del Paquete',\r\n      4: 'Resumen y Confirmación'\r\n    };\r\n    return titles[step as keyof typeof titles] || 'Paso';\r\n  }\r\n\r\n  // Función para obtener el precio máximo permitido por tipo de paquete\r\n  getMaxWeightForPackageType(tipo: string): number {\r\n    const paquete = this.tiposPaquete.find(p => p.value === tipo);\r\n    return paquete ? paquete.maxPeso : 0;\r\n  }\r\n\r\n  // Función para validar que el peso no exceda el máximo\r\n  validateWeight(): boolean {\r\n    const maxWeight = this.getMaxWeightForPackageType(this.shipmentForm.paquete.tipo);\r\n    return this.shipmentForm.paquete.peso <= maxWeight;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}