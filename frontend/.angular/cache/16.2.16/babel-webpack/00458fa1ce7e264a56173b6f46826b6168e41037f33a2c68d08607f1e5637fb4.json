{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EnviosService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3005/api'; // URL del backend\n    this.cotizacionActual = new BehaviorSubject(null);\n    // Observable para que los componentes puedan suscribirse\n    this.cotizacion$ = this.cotizacionActual.asObservable();\n  }\n  getHttpOptions() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n  }\n  /**\n   * Solicita una cotización de envío\n   */\n  cotizarEnvio(request) {\n    console.log(' Enviando solicitud de cotización:', request);\n    return this.http.post(`${this.apiUrl}/cotizar`, request, this.getHttpOptions()).pipe(tap(response => {\n      console.log(' Cotización recibida:', response);\n      if (response.success) {\n        this.cotizacionActual.next(response);\n      }\n    }), catchError(error => {\n      console.error(' Error en cotización:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Convierte los paquetes del formato del componente al formato de la API\n   */\n  convertirPaquetesParaAPI(paquetesSeleccionados) {\n    return paquetesSeleccionados.map(paquete => ({\n      id: paquete.id,\n      tipo: paquete.tipo.id || paquete.tipo.nombre,\n      peso: this.extraerNumero(paquete.tipo.limitePeso) || 1,\n      largo: 20,\n      ancho: 20,\n      alto: 20,\n      valor_declarado: 0,\n      cantidad: paquete.cantidad,\n      nombrePersonalizado: paquete.nombrePersonalizado\n    }));\n  }\n  /**\n   * Extrae números de strings como \"hasta 5kg\"\n   */\n  extraerNumero(texto) {\n    if (!texto) return 1;\n    const match = texto.match(/(\\d+\\.?\\d*)/);\n    return match ? parseFloat(match[1]) : 1;\n  }\n  /**\n   * Obtiene la cotización actual\n   */\n  getCotizacionActual() {\n    return this.cotizacionActual.value;\n  }\n  /**\n   * Limpia la cotización actual\n   */\n  limpiarCotizacion() {\n    this.cotizacionActual.next(null);\n  }\n  /**\n   * Valida que una cotización aún esté vigente\n   */\n  esCotizacionValida(cotizacion) {\n    if (!cotizacion?.cotizacion?.valida_hasta) return false;\n    const validaHasta = new Date(cotizacion.cotizacion.valida_hasta);\n    return validaHasta > new Date();\n  }\n  /**\n   * Formatea un precio para mostrar\n   */\n  formatearPrecio(precio, moneda = 'GTQ') {\n    return new Intl.NumberFormat('es-GT', {\n      style: 'currency',\n      currency: moneda,\n      minimumFractionDigits: 2\n    }).format(precio);\n  }\n  /**\n   * Obtiene el estado de la conexión del servidor\n   */\n  verificarConexion() {\n    return this.http.get(`${this.apiUrl}/health`, this.getHttpOptions());\n  }\n  // ============================================\n  // MÉTODOS PARA ENVÍOS MEJORADOS\n  // ============================================\n  /**\n   * Crear envío mejorado con autenticación\n   */\n  crearEnvioMejorado(datosEnvio) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    console.log('📦 Creando envío mejorado:', datosEnvio);\n    return this.http.post(`${this.apiUrl}/shipments/enhanced`, datosEnvio, {\n      headers\n    }).pipe(tap(response => {\n      console.log('✅ Envío creado exitosamente:', response);\n    }), catchError(error => {\n      console.error('❌ Error al crear envío:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener envíos del usuario autenticado\n   */\n  obtenerEnviosUsuario() {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/shipments/user`, {\n      headers\n    }).pipe(tap(response => {\n      console.log('📋 Envíos obtenidos:', response);\n    }), catchError(error => {\n      console.error('❌ Error al obtener envíos:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Actualizar estado de envío\n   */\n  actualizarEstadoEnvio(shipmentId, status, location, description) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const data = {\n      status,\n      location: location || 'Guatemala',\n      description: description || `Estado actualizado a ${status}`\n    };\n    return this.http.put(`${this.apiUrl}/shipments/${shipmentId}/status`, data, {\n      headers\n    }).pipe(tap(response => {\n      console.log('✅ Estado actualizado:', response);\n    }), catchError(error => {\n      console.error('❌ Error al actualizar estado:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Rastrear envío por número de tracking (público)\n   */\n  rastrearEnvio(trackingNumber) {\n    return this.http.get(`${this.apiUrl}/shipments/track/${trackingNumber}`).pipe(tap(response => {\n      console.log('🔍 Información de rastreo:', response);\n    }), catchError(error => {\n      console.error('❌ Error al rastrear envío:', error);\n      throw error;\n    }));\n  }\n  // ============================================\n  // NUEVOS MÉTODOS PARA EL FORMULARIO DE ENVÍOS\n  // ============================================\n  /**\n   * Obtener direcciones frecuentes del usuario\n   */\n  obtenerDireccionesFrecuentes(category, search) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    let params = '';\n    const queryParams = [];\n    if (category) queryParams.push(`category=${category}`);\n    if (search) queryParams.push(`search=${encodeURIComponent(search)}`);\n    if (queryParams.length > 0) params = '?' + queryParams.join('&');\n    return this.http.get(`${this.apiUrl}/frequent-addresses${params}`, {\n      headers\n    }).pipe(tap(response => {\n      console.log('📍 Direcciones frecuentes obtenidas:', response);\n    }), catchError(error => {\n      console.error('❌ Error al obtener direcciones frecuentes:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Crear nueva dirección frecuente\n   */\n  crearDireccionFrecuente(direccion) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.post(`${this.apiUrl}/frequent-addresses`, direccion, {\n      headers\n    }).pipe(tap(response => {\n      console.log('✅ Dirección frecuente creada:', response);\n    }), catchError(error => {\n      console.error('❌ Error al crear dirección frecuente:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Usar dirección frecuente (incrementar contador)\n   */\n  usarDireccionFrecuente(addressId) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.post(`${this.apiUrl}/frequent-addresses/${addressId}/use`, {}, {\n      headers\n    }).pipe(tap(response => {\n      console.log('📊 Uso de dirección registrado:', response);\n    }), catchError(error => {\n      console.error('❌ Error al registrar uso de dirección:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener métodos de pago disponibles\n   */\n  obtenerMetodosPago() {\n    return this.http.get(`${this.apiUrl}/payment-methods`).pipe(tap(response => {\n      console.log('💳 Métodos de pago obtenidos:', response);\n    }), catchError(error => {\n      console.error('❌ Error al obtener métodos de pago:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Calcular cargo por método de pago\n   */\n  calcularCargoPago(methodId, orderValue) {\n    const data = {\n      methodId,\n      orderValue\n    };\n    return this.http.post(`${this.apiUrl}/payment-methods/calculate-fee`, data).pipe(tap(response => {\n      console.log('💰 Cargo calculado:', response);\n    }), catchError(error => {\n      console.error('❌ Error al calcular cargo:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener tipos de paquetes disponibles\n   */\n  obtenerTiposPaquetes(category) {\n    let params = category ? `?category=${category}` : '';\n    return this.http.get(`${this.apiUrl}/package-types${params}`).pipe(tap(response => {\n      console.log('📦 Tipos de paquetes obtenidos:', response);\n    }), catchError(error => {\n      console.error('❌ Error al obtener tipos de paquetes:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Validar paquete según tipo\n   */\n  validarPaquete(typeId, weight, dimensions, value) {\n    const data = {\n      typeId,\n      weight,\n      dimensions,\n      value\n    };\n    return this.http.post(`${this.apiUrl}/package-types/validate`, data).pipe(tap(response => {\n      console.log('✅ Validación de paquete:', response);\n    }), catchError(error => {\n      console.error('❌ Error al validar paquete:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Crear envío con validaciones completas\n   */\n  crearEnvioConValidacion(datosEnvio) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.post(`${this.apiUrl}/shipments/create-with-validation`, datosEnvio, {\n      headers\n    }).pipe(tap(response => {\n      console.log('🚚 Envío creado exitosamente:', response);\n    }), catchError(error => {\n      console.error('❌ Error al crear envío:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener departamentos de Guatemala\n   */\n  obtenerDepartamentos() {\n    return this.http.get(`${this.apiUrl}/guatemala/departments`).pipe(tap(response => {\n      console.log('🏛️ Departamentos obtenidos:', response);\n    }), catchError(error => {\n      console.error('❌ Error al obtener departamentos:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener municipios por departamento\n   */\n  obtenerMunicipios(department) {\n    return this.http.get(`${this.apiUrl}/guatemala/municipalities?department=${encodeURIComponent(department)}`).pipe(tap(response => {\n      console.log('🏘️ Municipios obtenidos:', response);\n    }), catchError(error => {\n      console.error('❌ Error al obtener municipios:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener poblados/aldeas por municipio\n   */\n  obtenerPoblados(department, municipality) {\n    const params = `?department=${encodeURIComponent(department)}&municipality=${encodeURIComponent(municipality)}`;\n    return this.http.get(`${this.apiUrl}/guatemala/villages${params}`).pipe(tap(response => {\n      console.log('🏡 Poblados obtenidos:', response);\n    }), catchError(error => {\n      console.error('❌ Error al obtener poblados:', error);\n      throw error;\n    }));\n  }\n  static {\n    this.ɵfac = function EnviosService_Factory(t) {\n      return new (t || EnviosService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EnviosService,\n      factory: EnviosService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","catchError","tap","EnviosService","constructor","http","apiUrl","cotizacionActual","cotizacion$","asObservable","getHttpOptions","headers","cotizarEnvio","request","console","log","post","pipe","response","success","next","error","convertirPaquetesParaAPI","paquetesSeleccionados","map","paquete","id","tipo","nombre","peso","extraerNumero","limitePeso","largo","ancho","alto","valor_declarado","cantidad","nombrePersonalizado","texto","match","parseFloat","getCotizacionActual","value","limpiarCotizacion","esCotizacionValida","cotizacion","valida_hasta","validaHasta","Date","formatearPrecio","precio","moneda","Intl","NumberFormat","style","currency","minimumFractionDigits","format","verificarConexion","get","crearEnvioMejorado","datosEnvio","token","localStorage","getItem","obtenerEnviosUsuario","actualizarEstadoEnvio","shipmentId","status","location","description","data","put","rastrearEnvio","trackingNumber","obtenerDireccionesFrecuentes","category","search","params","queryParams","push","encodeURIComponent","length","join","crearDireccionFrecuente","direccion","usarDireccionFrecuente","addressId","obtenerMetodosPago","calcularCargoPago","methodId","orderValue","obtenerTiposPaquetes","validarPaquete","typeId","weight","dimensions","crearEnvioConValidacion","obtenerDepartamentos","obtenerMunicipios","department","obtenerPoblados","municipality","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ferna\\Desktop\\envios\\DsEnvios\\frontend\\src\\app\\services\\envios.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\n// Interfaces para la API existentes\r\ninterface CotizacionRequest {\r\n  origen: string;\r\n  destino: string;\r\n  paquetes: PaqueteRequest[];\r\n  servicio?: string;\r\n}\r\n\r\ninterface PaqueteRequest {\r\n  id: string;\r\n  tipo: string;\r\n  peso: number;\r\n  largo: number;\r\n  ancho: number;\r\n  alto: number;\r\n  valor_declarado: number;\r\n  cantidad: number;\r\n  nombrePersonalizado: string;\r\n}\r\n\r\n// ============================================\r\n// NUEVAS INTERFACES PARA EL FORMULARIO DE ENVÍOS\r\n// ============================================\r\n\r\n// Dirección frecuente\r\ninterface FrequentAddress {\r\n  _id?: string;\r\n  userId: string;\r\n  nickname: string;\r\n  category: 'casa' | 'trabajo' | 'gimnasio' | 'escuela' | 'otro';\r\n  contactName: string;\r\n  phone: string;\r\n  alternatePhone?: string;\r\n  email?: string;\r\n  address: {\r\n    department: string;\r\n    municipality: string;\r\n    zone?: string;\r\n    street: string;\r\n    building?: string;\r\n    floor?: string;\r\n    apartment?: string;\r\n    reference?: string;\r\n    postalCode?: string;\r\n    coordinates?: {\r\n      lat: number;\r\n      lng: number;\r\n    };\r\n  };\r\n  deliveryInstructions?: {\r\n    preferredTime?: string;\r\n    accessNotes?: string;\r\n    alternateRecipient?: string;\r\n    gateCode?: string;\r\n    parkingInstructions?: string;\r\n  };\r\n  usageCount: number;\r\n  lastUsed?: Date;\r\n  isActive: boolean;\r\n  isPrimary: boolean;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// Método de pago\r\ninterface PaymentMethod {\r\n  _id?: string;\r\n  methodId: string;\r\n  displayName: string;\r\n  description: string;\r\n  type: string;\r\n  isActive: boolean;\r\n  requiresVerification: boolean;\r\n  fees: {\r\n    fixedAmount: number;\r\n    percentageRate: number;\r\n    minimumCharge: number;\r\n    maximumCharge?: number;\r\n    currency: string;\r\n  };\r\n  restrictions: {\r\n    maxOrderValue: number;\r\n    minOrderValue: number;\r\n    allowedRegions: string[];\r\n    excludedRegions: string[];\r\n    requiresDocument: boolean;\r\n  };\r\n  settings: {\r\n    collectionTimeout: number;\r\n    verificationRequired: boolean;\r\n    allowPartialPayment: boolean;\r\n    refundable: boolean;\r\n  };\r\n}\r\n\r\n// Tipo de paquete\r\ninterface PackageType {\r\n  _id?: string;\r\n  typeId: string;\r\n  displayName: string;\r\n  category: string;\r\n  specifications: {\r\n    maxWeight: number;\r\n    maxDimensions: {\r\n      length: number;\r\n      width: number;\r\n      height: number;\r\n    };\r\n    fragile: boolean;\r\n    stackable: boolean;\r\n    requiresSignature: boolean;\r\n  };\r\n  pricing: {\r\n    basePrice: number;\r\n    priceModifier: number;\r\n    includedServices: string[];\r\n    excludedServices: string[];\r\n  };\r\n  contentRestrictions: {\r\n    allowedItems: string[];\r\n    prohibitedItems: string[];\r\n    requiresDeclaration: boolean;\r\n  };\r\n  deliveryOptions: {\r\n    availableServices: string[];\r\n    defaultService: string;\r\n    maxDeliveryDays: number;\r\n    trackingLevel: string;\r\n  };\r\n  isActive: boolean;\r\n  displayOrder: number;\r\n}\r\n\r\n// Datos del nuevo formulario de envío\r\ninterface NewShipmentForm {\r\n  // Paso 1: Información del destinatario (campos obligatorios con *)\r\n  receiverName: string;           // *\r\n  receiverEmail: string;          // *\r\n  receiverReference: 'casa' | 'trabajo' | 'gimnasio' | 'escuela';  // *\r\n  receiverPoblado: string;        // *\r\n  receiverMunicipio: string;      // *\r\n  receiverDepartamento: string;   // *\r\n  receiverPhone?: string;\r\n  receiverAddress?: any;\r\n  frequentAddressId?: string;\r\n  \r\n  // Paso 2: Método de pago\r\n  paymentMethodId: string;        // *\r\n  \r\n  // Paso 3: Tipo de paquete\r\n  packageTypeId: string;          // *\r\n  packageWeight?: number;\r\n  packageDimensions?: {\r\n    length: number;\r\n    width: number;\r\n    height: number;\r\n  };\r\n  packageValue?: number;\r\n  packageDescription?: string;\r\n  \r\n  // Información del remitente (opcional)\r\n  senderName?: string;\r\n  senderPhone?: string;\r\n  senderEmail?: string;\r\n  senderAddress?: any;\r\n}\r\n\r\n// Ubicación (Guatemala)\r\ninterface LocationData {\r\n  department: string;\r\n  municipality: string;\r\n  village?: string;\r\n}\r\n\r\ninterface CotizacionResponse {\r\n  success: boolean;\r\n  cotizacion: {\r\n    id: string;\r\n    origen: {\r\n      ciudad: string;\r\n      departamento: string;\r\n      display: string;\r\n    };\r\n    destino: {\r\n      ciudad: string;\r\n      departamento: string;\r\n      display: string;\r\n    };\r\n    distancia: {\r\n      distance: number;\r\n      duration: number;\r\n      distanceText: string;\r\n      durationText: string;\r\n      source: string;\r\n    };\r\n    paquetes: PaqueteCotizado[];\r\n    servicios: ServicioDisponible[];\r\n    total_general: number;\r\n    moneda: string;\r\n    tiempo_entrega: string;\r\n    valida_hasta: string;\r\n    generada_en: string;\r\n  };\r\n  message: string;\r\n}\r\n\r\ninterface PaqueteCotizado {\r\n  paquete_id: string;\r\n  nombre: string;\r\n  cantidad: number;\r\n  total: number;\r\n  currency: string;\r\n  breakdown: {\r\n    basePrice: number;\r\n    weightCost: number;\r\n    distanceCost: number;\r\n    insuranceCost: number;\r\n    oversizeCost: number;\r\n    fuelSurcharge: number;\r\n    handlingSurcharge: number;\r\n    subtotal: number;\r\n    total: number;\r\n  };\r\n  estimatedDelivery: string;\r\n  serviceType: string;\r\n}\r\n\r\ninterface ServicioDisponible {\r\n  id: string;\r\n  nombre: string;\r\n  descripcion: string;\r\n  precio_base: number;\r\n  tiempo_entrega: string;\r\n  precio_por_kg: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnviosService {\r\n  private apiUrl = 'http://localhost:3005/api'; // URL del backend\r\n  private cotizacionActual = new BehaviorSubject<CotizacionResponse | null>(null);\r\n  \r\n  // Observable para que los componentes puedan suscribirse\r\n  public cotizacion$ = this.cotizacionActual.asObservable();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private getHttpOptions() {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Solicita una cotización de envío\r\n   */\r\n  cotizarEnvio(request: CotizacionRequest): Observable<CotizacionResponse> {\r\n    console.log(' Enviando solicitud de cotización:', request);\r\n    \r\n    return this.http.post<CotizacionResponse>(\r\n      `${this.apiUrl}/cotizar`, \r\n      request, \r\n      this.getHttpOptions()\r\n    ).pipe(\r\n      tap(response => {\r\n        console.log(' Cotización recibida:', response);\r\n        if (response.success) {\r\n          this.cotizacionActual.next(response);\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error(' Error en cotización:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Convierte los paquetes del formato del componente al formato de la API\r\n   */\r\n  convertirPaquetesParaAPI(paquetesSeleccionados: any[]): PaqueteRequest[] {\r\n    return paquetesSeleccionados.map(paquete => ({\r\n      id: paquete.id,\r\n      tipo: paquete.tipo.id || paquete.tipo.nombre,\r\n      peso: this.extraerNumero(paquete.tipo.limitePeso) || 1,\r\n      largo: 20, // Valores por defecto, se pueden hacer dinámicos\r\n      ancho: 20,\r\n      alto: 20,\r\n      valor_declarado: 0, // Se puede agregar al formulario\r\n      cantidad: paquete.cantidad,\r\n      nombrePersonalizado: paquete.nombrePersonalizado\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Extrae números de strings como \"hasta 5kg\"\r\n   */\r\n  private extraerNumero(texto: string): number {\r\n    if (!texto) return 1;\r\n    const match = texto.match(/(\\d+\\.?\\d*)/);\r\n    return match ? parseFloat(match[1]) : 1;\r\n  }\r\n\r\n  /**\r\n   * Obtiene la cotización actual\r\n   */\r\n  getCotizacionActual(): CotizacionResponse | null {\r\n    return this.cotizacionActual.value;\r\n  }\r\n\r\n  /**\r\n   * Limpia la cotización actual\r\n   */\r\n  limpiarCotizacion(): void {\r\n    this.cotizacionActual.next(null);\r\n  }\r\n\r\n  /**\r\n   * Valida que una cotización aún esté vigente\r\n   */\r\n  esCotizacionValida(cotizacion: CotizacionResponse): boolean {\r\n    if (!cotizacion?.cotizacion?.valida_hasta) return false;\r\n    const validaHasta = new Date(cotizacion.cotizacion.valida_hasta);\r\n    return validaHasta > new Date();\r\n  }\r\n\r\n  /**\r\n   * Formatea un precio para mostrar\r\n   */\r\n  formatearPrecio(precio: number, moneda: string = 'GTQ'): string {\r\n    return new Intl.NumberFormat('es-GT', {\r\n      style: 'currency',\r\n      currency: moneda,\r\n      minimumFractionDigits: 2\r\n    }).format(precio);\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado de la conexión del servidor\r\n   */\r\n  verificarConexion(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/health`, this.getHttpOptions());\r\n  }\r\n\r\n  // ============================================\r\n  // MÉTODOS PARA ENVÍOS MEJORADOS\r\n  // ============================================\r\n\r\n  /**\r\n   * Crear envío mejorado con autenticación\r\n   */\r\n  crearEnvioMejorado(datosEnvio: any): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    console.log('📦 Creando envío mejorado:', datosEnvio);\r\n\r\n    return this.http.post(`${this.apiUrl}/shipments/enhanced`, datosEnvio, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('✅ Envío creado exitosamente:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al crear envío:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener envíos del usuario autenticado\r\n   */\r\n  obtenerEnviosUsuario(): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    return this.http.get(`${this.apiUrl}/shipments/user`, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('📋 Envíos obtenidos:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al obtener envíos:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualizar estado de envío\r\n   */\r\n  actualizarEstadoEnvio(shipmentId: string, status: string, location?: string, description?: string): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    const data = {\r\n      status,\r\n      location: location || 'Guatemala',\r\n      description: description || `Estado actualizado a ${status}`\r\n    };\r\n\r\n    return this.http.put(`${this.apiUrl}/shipments/${shipmentId}/status`, data, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('✅ Estado actualizado:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al actualizar estado:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rastrear envío por número de tracking (público)\r\n   */\r\n  rastrearEnvio(trackingNumber: string): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/shipments/track/${trackingNumber}`).pipe(\r\n      tap(response => {\r\n        console.log('🔍 Información de rastreo:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al rastrear envío:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // ============================================\r\n  // NUEVOS MÉTODOS PARA EL FORMULARIO DE ENVÍOS\r\n  // ============================================\r\n\r\n  /**\r\n   * Obtener direcciones frecuentes del usuario\r\n   */\r\n  obtenerDireccionesFrecuentes(category?: string, search?: string): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    let params = '';\r\n    const queryParams = [];\r\n    if (category) queryParams.push(`category=${category}`);\r\n    if (search) queryParams.push(`search=${encodeURIComponent(search)}`);\r\n    if (queryParams.length > 0) params = '?' + queryParams.join('&');\r\n\r\n    return this.http.get(`${this.apiUrl}/frequent-addresses${params}`, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('📍 Direcciones frecuentes obtenidas:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al obtener direcciones frecuentes:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crear nueva dirección frecuente\r\n   */\r\n  crearDireccionFrecuente(direccion: any): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    return this.http.post(`${this.apiUrl}/frequent-addresses`, direccion, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('✅ Dirección frecuente creada:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al crear dirección frecuente:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Usar dirección frecuente (incrementar contador)\r\n   */\r\n  usarDireccionFrecuente(addressId: string): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    return this.http.post(`${this.apiUrl}/frequent-addresses/${addressId}/use`, {}, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('📊 Uso de dirección registrado:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al registrar uso de dirección:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener métodos de pago disponibles\r\n   */\r\n  obtenerMetodosPago(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/payment-methods`).pipe(\r\n      tap(response => {\r\n        console.log('💳 Métodos de pago obtenidos:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al obtener métodos de pago:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calcular cargo por método de pago\r\n   */\r\n  calcularCargoPago(methodId: string, orderValue: number): Observable<any> {\r\n    const data = { methodId, orderValue };\r\n\r\n    return this.http.post(`${this.apiUrl}/payment-methods/calculate-fee`, data).pipe(\r\n      tap(response => {\r\n        console.log('💰 Cargo calculado:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al calcular cargo:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener tipos de paquetes disponibles\r\n   */\r\n  obtenerTiposPaquetes(category?: string): Observable<any> {\r\n    let params = category ? `?category=${category}` : '';\r\n\r\n    return this.http.get(`${this.apiUrl}/package-types${params}`).pipe(\r\n      tap(response => {\r\n        console.log('📦 Tipos de paquetes obtenidos:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al obtener tipos de paquetes:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validar paquete según tipo\r\n   */\r\n  validarPaquete(typeId: string, weight?: number, dimensions?: any, value?: number): Observable<any> {\r\n    const data = { typeId, weight, dimensions, value };\r\n\r\n    return this.http.post(`${this.apiUrl}/package-types/validate`, data).pipe(\r\n      tap(response => {\r\n        console.log('✅ Validación de paquete:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al validar paquete:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Crear envío con validaciones completas\r\n   */\r\n  crearEnvioConValidacion(datosEnvio: any): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    return this.http.post(`${this.apiUrl}/shipments/create-with-validation`, datosEnvio, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('🚚 Envío creado exitosamente:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al crear envío:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener departamentos de Guatemala\r\n   */\r\n  obtenerDepartamentos(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/guatemala/departments`).pipe(\r\n      tap(response => {\r\n        console.log('🏛️ Departamentos obtenidos:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al obtener departamentos:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener municipios por departamento\r\n   */\r\n  obtenerMunicipios(department: string): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/guatemala/municipalities?department=${encodeURIComponent(department)}`).pipe(\r\n      tap(response => {\r\n        console.log('🏘️ Municipios obtenidos:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al obtener municipios:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener poblados/aldeas por municipio\r\n   */\r\n  obtenerPoblados(department: string, municipality: string): Observable<any> {\r\n    const params = `?department=${encodeURIComponent(department)}&municipality=${encodeURIComponent(municipality)}`;\r\n    \r\n    return this.http.get(`${this.apiUrl}/guatemala/villages${params}`).pipe(\r\n      tap(response => {\r\n        console.log('🏡 Poblados obtenidos:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('❌ Error al obtener poblados:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}