{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EnviosService = /*#__PURE__*/(() => {\n  class EnviosService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3005/api'; // URL del backend\n      this.cotizacionActual = new BehaviorSubject(null);\n      // Observable para que los componentes puedan suscribirse\n      this.cotizacion$ = this.cotizacionActual.asObservable();\n    }\n    getHttpOptions() {\n      return {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        })\n      };\n    }\n    /**\n     * Solicita una cotizaci√≥n de env√≠o\n     */\n    cotizarEnvio(request) {\n      console.log(' Enviando solicitud de cotizaci√≥n:', request);\n      return this.http.post(`${this.apiUrl}/cotizar`, request, this.getHttpOptions()).pipe(tap(response => {\n        console.log(' Cotizaci√≥n recibida:', response);\n        if (response.success) {\n          this.cotizacionActual.next(response);\n        }\n      }), catchError(error => {\n        console.error(' Error en cotizaci√≥n:', error);\n        throw error;\n      }));\n    }\n    /**\n     * Convierte los paquetes del formato del componente al formato de la API\n     */\n    convertirPaquetesParaAPI(paquetesSeleccionados) {\n      return paquetesSeleccionados.map(paquete => ({\n        id: paquete.id,\n        tipo: paquete.tipo.id || paquete.tipo.nombre,\n        peso: this.extraerNumero(paquete.tipo.limitePeso) || 1,\n        largo: 20,\n        ancho: 20,\n        alto: 20,\n        valor_declarado: 0,\n        cantidad: paquete.cantidad,\n        nombrePersonalizado: paquete.nombrePersonalizado\n      }));\n    }\n    /**\n     * Extrae n√∫meros de strings como \"hasta 5kg\"\n     */\n    extraerNumero(texto) {\n      if (!texto) return 1;\n      const match = texto.match(/(\\d+\\.?\\d*)/);\n      return match ? parseFloat(match[1]) : 1;\n    }\n    /**\n     * Obtiene la cotizaci√≥n actual\n     */\n    getCotizacionActual() {\n      return this.cotizacionActual.value;\n    }\n    /**\n     * Limpia la cotizaci√≥n actual\n     */\n    limpiarCotizacion() {\n      this.cotizacionActual.next(null);\n    }\n    /**\n     * Valida que una cotizaci√≥n a√∫n est√© vigente\n     */\n    esCotizacionValida(cotizacion) {\n      if (!cotizacion?.cotizacion?.valida_hasta) return false;\n      const validaHasta = new Date(cotizacion.cotizacion.valida_hasta);\n      return validaHasta > new Date();\n    }\n    /**\n     * Formatea un precio para mostrar\n     */\n    formatearPrecio(precio, moneda = 'GTQ') {\n      return new Intl.NumberFormat('es-GT', {\n        style: 'currency',\n        currency: moneda,\n        minimumFractionDigits: 2\n      }).format(precio);\n    }\n    /**\n     * Obtiene el estado de la conexi√≥n del servidor\n     */\n    verificarConexion() {\n      return this.http.get(`${this.apiUrl}/health`, this.getHttpOptions());\n    }\n    // ============================================\n    // M√âTODOS PARA ENV√çOS MEJORADOS\n    // ============================================\n    /**\n     * Crear env√≠o mejorado con autenticaci√≥n\n     */\n    crearEnvioMejorado(datosEnvio) {\n      const token = localStorage.getItem('authToken');\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n      console.log('üì¶ Creando env√≠o mejorado:', datosEnvio);\n      return this.http.post(`${this.apiUrl}/shipments/enhanced`, datosEnvio, {\n        headers\n      }).pipe(tap(response => {\n        console.log('‚úÖ Env√≠o creado exitosamente:', response);\n      }), catchError(error => {\n        console.error('‚ùå Error al crear env√≠o:', error);\n        throw error;\n      }));\n    }\n    /**\n     * Obtener env√≠os del usuario autenticado\n     */\n    obtenerEnviosUsuario() {\n      const token = localStorage.getItem('authToken');\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.get(`${this.apiUrl}/shipments/user`, {\n        headers\n      }).pipe(tap(response => {\n        console.log('üìã Env√≠os obtenidos:', response);\n      }), catchError(error => {\n        console.error('‚ùå Error al obtener env√≠os:', error);\n        throw error;\n      }));\n    }\n    /**\n     * Actualizar estado de env√≠o\n     */\n    actualizarEstadoEnvio(shipmentId, status, location, description) {\n      const token = localStorage.getItem('authToken');\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n      const data = {\n        status,\n        location: location || 'Guatemala',\n        description: description || `Estado actualizado a ${status}`\n      };\n      return this.http.put(`${this.apiUrl}/shipments/${shipmentId}/status`, data, {\n        headers\n      }).pipe(tap(response => {\n        console.log('‚úÖ Estado actualizado:', response);\n      }), catchError(error => {\n        console.error('‚ùå Error al actualizar estado:', error);\n        throw error;\n      }));\n    }\n    /**\n     * Rastrear env√≠o por n√∫mero de tracking (p√∫blico)\n     */\n    rastrearEnvio(trackingNumber) {\n      return this.http.get(`${this.apiUrl}/shipments/track/${trackingNumber}`).pipe(tap(response => {\n        console.log('üîç Informaci√≥n de rastreo:', response);\n      }), catchError(error => {\n        console.error('‚ùå Error al rastrear env√≠o:', error);\n        throw error;\n      }));\n    }\n    static {\n      this.…µfac = function EnviosService_Factory(t) {\n        return new (t || EnviosService)(i0.…µ…µinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n        token: EnviosService,\n        factory: EnviosService.…µfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EnviosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}