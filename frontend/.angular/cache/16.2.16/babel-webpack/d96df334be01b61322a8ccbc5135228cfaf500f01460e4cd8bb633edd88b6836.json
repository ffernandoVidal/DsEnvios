{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    console.log('üîí AuthGuard: Verificando acceso a:', state.url);\n    if (this.authService.isAuthenticated()) {\n      console.log('‚úÖ AuthGuard: Usuario autenticado, acceso permitido');\n      return true;\n    }\n    console.log('‚ùå AuthGuard: Usuario no autenticado, redirigiendo a login');\n    // Guardar la URL intentada para redirigir despu√©s del login\n    localStorage.setItem('redirectUrl', state.url);\n    // Redirigir al login\n    this.router.navigate(['/login']);\n    return false;\n  }\n  static {\n    this.…µfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.…µ…µinject(i1.AuthService), i0.…µ…µinject(i2.Router));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","console","log","url","isAuthenticated","localStorage","setItem","navigate","i0","…µ…µinject","i1","AuthService","i2","Router","factory","…µfac","providedIn"],"sources":["C:\\Users\\Ferna\\Desktop\\envios\\DsEnvios\\frontend\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    \r\n    console.log('üîí AuthGuard: Verificando acceso a:', state.url);\r\n    \r\n    if (this.authService.isAuthenticated()) {\r\n      console.log('‚úÖ AuthGuard: Usuario autenticado, acceso permitido');\r\n      return true;\r\n    }\r\n\r\n    console.log('‚ùå AuthGuard: Usuario no autenticado, redirigiendo a login');\r\n    \r\n    // Guardar la URL intentada para redirigir despu√©s del login\r\n    localStorage.setItem('redirectUrl', state.url);\r\n    \r\n    // Redirigir al login\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n  }\r\n}"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAG1BC,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,KAAK,CAACG,GAAG,CAAC;IAE7D,IAAI,IAAI,CAACP,WAAW,CAACQ,eAAe,EAAE,EAAE;MACtCH,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjE,OAAO,IAAI;;IAGbD,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;IAExE;IACAG,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEN,KAAK,CAACG,GAAG,CAAC;IAE9C;IACA,IAAI,CAACN,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;;uBA3BWb,SAAS,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATnB,SAAS;MAAAoB,OAAA,EAATpB,SAAS,CAAAqB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}