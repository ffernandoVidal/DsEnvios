{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EnviosService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3005/api'; // URL del backend\n    this.cotizacionActual = new BehaviorSubject(null);\n    // Observable para que los componentes puedan suscribirse\n    this.cotizacion$ = this.cotizacionActual.asObservable();\n  }\n  getHttpOptions() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n  }\n  /**\n   * Solicita una cotizaci√≥n de env√≠o\n   */\n  cotizarEnvio(request) {\n    console.log(' Enviando solicitud de cotizaci√≥n:', request);\n    return this.http.post(`${this.apiUrl}/cotizar`, request, this.getHttpOptions()).pipe(tap(response => {\n      console.log(' Cotizaci√≥n recibida:', response);\n      if (response.success) {\n        this.cotizacionActual.next(response);\n      }\n    }), catchError(error => {\n      console.error(' Error en cotizaci√≥n:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Convierte los paquetes del formato del componente al formato de la API\n   */\n  convertirPaquetesParaAPI(paquetesSeleccionados) {\n    return paquetesSeleccionados.map(paquete => ({\n      id: paquete.id,\n      tipo: paquete.tipo.id || paquete.tipo.nombre,\n      peso: this.extraerNumero(paquete.tipo.limitePeso) || 1,\n      largo: 20,\n      ancho: 20,\n      alto: 20,\n      valor_declarado: 0,\n      cantidad: paquete.cantidad,\n      nombrePersonalizado: paquete.nombrePersonalizado\n    }));\n  }\n  /**\n   * Extrae n√∫meros de strings como \"hasta 5kg\"\n   */\n  extraerNumero(texto) {\n    if (!texto) return 1;\n    const match = texto.match(/(\\d+\\.?\\d*)/);\n    return match ? parseFloat(match[1]) : 1;\n  }\n  /**\n   * Obtiene la cotizaci√≥n actual\n   */\n  getCotizacionActual() {\n    return this.cotizacionActual.value;\n  }\n  /**\n   * Limpia la cotizaci√≥n actual\n   */\n  limpiarCotizacion() {\n    this.cotizacionActual.next(null);\n  }\n  /**\n   * Valida que una cotizaci√≥n a√∫n est√© vigente\n   */\n  esCotizacionValida(cotizacion) {\n    if (!cotizacion?.cotizacion?.valida_hasta) return false;\n    const validaHasta = new Date(cotizacion.cotizacion.valida_hasta);\n    return validaHasta > new Date();\n  }\n  /**\n   * Formatea un precio para mostrar\n   */\n  formatearPrecio(precio, moneda = 'GTQ') {\n    return new Intl.NumberFormat('es-GT', {\n      style: 'currency',\n      currency: moneda,\n      minimumFractionDigits: 2\n    }).format(precio);\n  }\n  /**\n   * Obtiene el estado de la conexi√≥n del servidor\n   */\n  verificarConexion() {\n    return this.http.get(`${this.apiUrl}/health`, this.getHttpOptions());\n  }\n  // ============================================\n  // M√âTODOS PARA ENV√çOS MEJORADOS\n  // ============================================\n  /**\n   * Crear env√≠o mejorado con autenticaci√≥n\n   */\n  crearEnvioMejorado(datosEnvio) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    console.log('üì¶ Creando env√≠o mejorado:', datosEnvio);\n    return this.http.post(`${this.apiUrl}/shipments/enhanced`, datosEnvio, {\n      headers\n    }).pipe(tap(response => {\n      console.log('‚úÖ Env√≠o creado exitosamente:', response);\n    }), catchError(error => {\n      console.error('‚ùå Error al crear env√≠o:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Obtener env√≠os del usuario autenticado\n   */\n  obtenerEnviosUsuario() {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/shipments/user`, {\n      headers\n    }).pipe(tap(response => {\n      console.log('üìã Env√≠os obtenidos:', response);\n    }), catchError(error => {\n      console.error('‚ùå Error al obtener env√≠os:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Actualizar estado de env√≠o\n   */\n  actualizarEstadoEnvio(shipmentId, status, location, description) {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const data = {\n      status,\n      location: location || 'Guatemala',\n      description: description || `Estado actualizado a ${status}`\n    };\n    return this.http.put(`${this.apiUrl}/shipments/${shipmentId}/status`, data, {\n      headers\n    }).pipe(tap(response => {\n      console.log('‚úÖ Estado actualizado:', response);\n    }), catchError(error => {\n      console.error('‚ùå Error al actualizar estado:', error);\n      throw error;\n    }));\n  }\n  /**\n   * Rastrear env√≠o por n√∫mero de tracking (p√∫blico)\n   */\n  rastrearEnvio(trackingNumber) {\n    return this.http.get(`${this.apiUrl}/shipments/track/${trackingNumber}`).pipe(tap(response => {\n      console.log('üîç Informaci√≥n de rastreo:', response);\n    }), catchError(error => {\n      console.error('‚ùå Error al rastrear env√≠o:', error);\n      throw error;\n    }));\n  }\n  static {\n    this.…µfac = function EnviosService_Factory(t) {\n      return new (t || EnviosService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: EnviosService,\n      factory: EnviosService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","catchError","tap","EnviosService","constructor","http","apiUrl","cotizacionActual","cotizacion$","asObservable","getHttpOptions","headers","cotizarEnvio","request","console","log","post","pipe","response","success","next","error","convertirPaquetesParaAPI","paquetesSeleccionados","map","paquete","id","tipo","nombre","peso","extraerNumero","limitePeso","largo","ancho","alto","valor_declarado","cantidad","nombrePersonalizado","texto","match","parseFloat","getCotizacionActual","value","limpiarCotizacion","esCotizacionValida","cotizacion","valida_hasta","validaHasta","Date","formatearPrecio","precio","moneda","Intl","NumberFormat","style","currency","minimumFractionDigits","format","verificarConexion","get","crearEnvioMejorado","datosEnvio","token","localStorage","getItem","obtenerEnviosUsuario","actualizarEstadoEnvio","shipmentId","status","location","description","data","put","rastrearEnvio","trackingNumber","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["C:\\Users\\Ferna\\Desktop\\envios\\DsEnvios\\frontend\\src\\app\\services\\envios.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\n// Interfaces para la API\r\ninterface CotizacionRequest {\r\n  origen: string;\r\n  destino: string;\r\n  paquetes: PaqueteRequest[];\r\n  servicio?: string;\r\n}\r\n\r\ninterface PaqueteRequest {\r\n  id: string;\r\n  tipo: string;\r\n  peso: number;\r\n  largo: number;\r\n  ancho: number;\r\n  alto: number;\r\n  valor_declarado: number;\r\n  cantidad: number;\r\n  nombrePersonalizado: string;\r\n}\r\n\r\ninterface CotizacionResponse {\r\n  success: boolean;\r\n  cotizacion: {\r\n    id: string;\r\n    origen: {\r\n      ciudad: string;\r\n      departamento: string;\r\n      display: string;\r\n    };\r\n    destino: {\r\n      ciudad: string;\r\n      departamento: string;\r\n      display: string;\r\n    };\r\n    distancia: {\r\n      distance: number;\r\n      duration: number;\r\n      distanceText: string;\r\n      durationText: string;\r\n      source: string;\r\n    };\r\n    paquetes: PaqueteCotizado[];\r\n    servicios: ServicioDisponible[];\r\n    total_general: number;\r\n    moneda: string;\r\n    tiempo_entrega: string;\r\n    valida_hasta: string;\r\n    generada_en: string;\r\n  };\r\n  message: string;\r\n}\r\n\r\ninterface PaqueteCotizado {\r\n  paquete_id: string;\r\n  nombre: string;\r\n  cantidad: number;\r\n  total: number;\r\n  currency: string;\r\n  breakdown: {\r\n    basePrice: number;\r\n    weightCost: number;\r\n    distanceCost: number;\r\n    insuranceCost: number;\r\n    oversizeCost: number;\r\n    fuelSurcharge: number;\r\n    handlingSurcharge: number;\r\n    subtotal: number;\r\n    total: number;\r\n  };\r\n  estimatedDelivery: string;\r\n  serviceType: string;\r\n}\r\n\r\ninterface ServicioDisponible {\r\n  id: string;\r\n  nombre: string;\r\n  descripcion: string;\r\n  precio_base: number;\r\n  tiempo_entrega: string;\r\n  precio_por_kg: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EnviosService {\r\n  private apiUrl = 'http://localhost:3005/api'; // URL del backend\r\n  private cotizacionActual = new BehaviorSubject<CotizacionResponse | null>(null);\r\n  \r\n  // Observable para que los componentes puedan suscribirse\r\n  public cotizacion$ = this.cotizacionActual.asObservable();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private getHttpOptions() {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Solicita una cotizaci√≥n de env√≠o\r\n   */\r\n  cotizarEnvio(request: CotizacionRequest): Observable<CotizacionResponse> {\r\n    console.log(' Enviando solicitud de cotizaci√≥n:', request);\r\n    \r\n    return this.http.post<CotizacionResponse>(\r\n      `${this.apiUrl}/cotizar`, \r\n      request, \r\n      this.getHttpOptions()\r\n    ).pipe(\r\n      tap(response => {\r\n        console.log(' Cotizaci√≥n recibida:', response);\r\n        if (response.success) {\r\n          this.cotizacionActual.next(response);\r\n        }\r\n      }),\r\n      catchError(error => {\r\n        console.error(' Error en cotizaci√≥n:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Convierte los paquetes del formato del componente al formato de la API\r\n   */\r\n  convertirPaquetesParaAPI(paquetesSeleccionados: any[]): PaqueteRequest[] {\r\n    return paquetesSeleccionados.map(paquete => ({\r\n      id: paquete.id,\r\n      tipo: paquete.tipo.id || paquete.tipo.nombre,\r\n      peso: this.extraerNumero(paquete.tipo.limitePeso) || 1,\r\n      largo: 20, // Valores por defecto, se pueden hacer din√°micos\r\n      ancho: 20,\r\n      alto: 20,\r\n      valor_declarado: 0, // Se puede agregar al formulario\r\n      cantidad: paquete.cantidad,\r\n      nombrePersonalizado: paquete.nombrePersonalizado\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Extrae n√∫meros de strings como \"hasta 5kg\"\r\n   */\r\n  private extraerNumero(texto: string): number {\r\n    if (!texto) return 1;\r\n    const match = texto.match(/(\\d+\\.?\\d*)/);\r\n    return match ? parseFloat(match[1]) : 1;\r\n  }\r\n\r\n  /**\r\n   * Obtiene la cotizaci√≥n actual\r\n   */\r\n  getCotizacionActual(): CotizacionResponse | null {\r\n    return this.cotizacionActual.value;\r\n  }\r\n\r\n  /**\r\n   * Limpia la cotizaci√≥n actual\r\n   */\r\n  limpiarCotizacion(): void {\r\n    this.cotizacionActual.next(null);\r\n  }\r\n\r\n  /**\r\n   * Valida que una cotizaci√≥n a√∫n est√© vigente\r\n   */\r\n  esCotizacionValida(cotizacion: CotizacionResponse): boolean {\r\n    if (!cotizacion?.cotizacion?.valida_hasta) return false;\r\n    const validaHasta = new Date(cotizacion.cotizacion.valida_hasta);\r\n    return validaHasta > new Date();\r\n  }\r\n\r\n  /**\r\n   * Formatea un precio para mostrar\r\n   */\r\n  formatearPrecio(precio: number, moneda: string = 'GTQ'): string {\r\n    return new Intl.NumberFormat('es-GT', {\r\n      style: 'currency',\r\n      currency: moneda,\r\n      minimumFractionDigits: 2\r\n    }).format(precio);\r\n  }\r\n\r\n  /**\r\n   * Obtiene el estado de la conexi√≥n del servidor\r\n   */\r\n  verificarConexion(): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/health`, this.getHttpOptions());\r\n  }\r\n\r\n  // ============================================\r\n  // M√âTODOS PARA ENV√çOS MEJORADOS\r\n  // ============================================\r\n\r\n  /**\r\n   * Crear env√≠o mejorado con autenticaci√≥n\r\n   */\r\n  crearEnvioMejorado(datosEnvio: any): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    console.log('üì¶ Creando env√≠o mejorado:', datosEnvio);\r\n\r\n    return this.http.post(`${this.apiUrl}/shipments/enhanced`, datosEnvio, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('‚úÖ Env√≠o creado exitosamente:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Error al crear env√≠o:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Obtener env√≠os del usuario autenticado\r\n   */\r\n  obtenerEnviosUsuario(): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    return this.http.get(`${this.apiUrl}/shipments/user`, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('üìã Env√≠os obtenidos:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Error al obtener env√≠os:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Actualizar estado de env√≠o\r\n   */\r\n  actualizarEstadoEnvio(shipmentId: string, status: string, location?: string, description?: string): Observable<any> {\r\n    const token = localStorage.getItem('authToken');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    const data = {\r\n      status,\r\n      location: location || 'Guatemala',\r\n      description: description || `Estado actualizado a ${status}`\r\n    };\r\n\r\n    return this.http.put(`${this.apiUrl}/shipments/${shipmentId}/status`, data, { headers }).pipe(\r\n      tap(response => {\r\n        console.log('‚úÖ Estado actualizado:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Error al actualizar estado:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rastrear env√≠o por n√∫mero de tracking (p√∫blico)\r\n   */\r\n  rastrearEnvio(trackingNumber: string): Observable<any> {\r\n    return this.http.get(`${this.apiUrl}/shipments/track/${trackingNumber}`).pipe(\r\n      tap(response => {\r\n        console.log('üîç Informaci√≥n de rastreo:', response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('‚ùå Error al rastrear env√≠o:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,eAAe,QAAQ,MAAM;AAClD,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAuFhD,OAAM,MAAOC,aAAa;EAOxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAC,MAAM,GAAG,2BAA2B,CAAC,CAAC;IACtC,KAAAC,gBAAgB,GAAG,IAAIP,eAAe,CAA4B,IAAI,CAAC;IAE/E;IACO,KAAAQ,WAAW,GAAG,IAAI,CAACD,gBAAgB,CAACE,YAAY,EAAE;EAEjB;EAEhCC,cAAcA,CAAA;IACpB,OAAO;MACLC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;OACX;KACF;EACH;EAEA;;;EAGAa,YAAYA,CAACC,OAA0B;IACrCC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,OAAO,CAAC;IAE1D,OAAO,IAAI,CAACR,IAAI,CAACW,IAAI,CACnB,GAAG,IAAI,CAACV,MAAM,UAAU,EACxBO,OAAO,EACP,IAAI,CAACH,cAAc,EAAE,CACtB,CAACO,IAAI,CACJf,GAAG,CAACgB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,QAAQ,CAAC;MAC9C,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpB,IAAI,CAACZ,gBAAgB,CAACa,IAAI,CAACF,QAAQ,CAAC;;IAExC,CAAC,CAAC,EACFjB,UAAU,CAACoB,KAAK,IAAG;MACjBP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;;;EAGAC,wBAAwBA,CAACC,qBAA4B;IACnD,OAAOA,qBAAqB,CAACC,GAAG,CAACC,OAAO,KAAK;MAC3CC,EAAE,EAAED,OAAO,CAACC,EAAE;MACdC,IAAI,EAAEF,OAAO,CAACE,IAAI,CAACD,EAAE,IAAID,OAAO,CAACE,IAAI,CAACC,MAAM;MAC5CC,IAAI,EAAE,IAAI,CAACC,aAAa,CAACL,OAAO,CAACE,IAAI,CAACI,UAAU,CAAC,IAAI,CAAC;MACtDC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,EAAE;MACRC,eAAe,EAAE,CAAC;MAClBC,QAAQ,EAAEX,OAAO,CAACW,QAAQ;MAC1BC,mBAAmB,EAAEZ,OAAO,CAACY;KAC9B,CAAC,CAAC;EACL;EAEA;;;EAGQP,aAAaA,CAACQ,KAAa;IACjC,IAAI,CAACA,KAAK,EAAE,OAAO,CAAC;IACpB,MAAMC,KAAK,GAAGD,KAAK,CAACC,KAAK,CAAC,aAAa,CAAC;IACxC,OAAOA,KAAK,GAAGC,UAAU,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EACzC;EAEA;;;EAGAE,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAAClC,gBAAgB,CAACmC,KAAK;EACpC;EAEA;;;EAGAC,iBAAiBA,CAAA;IACf,IAAI,CAACpC,gBAAgB,CAACa,IAAI,CAAC,IAAI,CAAC;EAClC;EAEA;;;EAGAwB,kBAAkBA,CAACC,UAA8B;IAC/C,IAAI,CAACA,UAAU,EAAEA,UAAU,EAAEC,YAAY,EAAE,OAAO,KAAK;IACvD,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAACH,UAAU,CAACA,UAAU,CAACC,YAAY,CAAC;IAChE,OAAOC,WAAW,GAAG,IAAIC,IAAI,EAAE;EACjC;EAEA;;;EAGAC,eAAeA,CAACC,MAAc,EAAEC,MAAA,GAAiB,KAAK;IACpD,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;MACpCC,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAEJ,MAAM;MAChBK,qBAAqB,EAAE;KACxB,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;EACnB;EAEA;;;EAGAQ,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACrD,IAAI,CAACsD,GAAG,CAAC,GAAG,IAAI,CAACrD,MAAM,SAAS,EAAE,IAAI,CAACI,cAAc,EAAE,CAAC;EACtE;EAEA;EACA;EACA;EAEA;;;EAGAkD,kBAAkBA,CAACC,UAAe;IAChC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMrD,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAU+D,KAAK;KACjC,CAAC;IAEFhD,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE8C,UAAU,CAAC;IAErD,OAAO,IAAI,CAACxD,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACV,MAAM,qBAAqB,EAAEuD,UAAU,EAAE;MAAElD;IAAO,CAAE,CAAC,CAACM,IAAI,CACtFf,GAAG,CAACgB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEG,QAAQ,CAAC;IACvD,CAAC,CAAC,EACFjB,UAAU,CAACoB,KAAK,IAAG;MACjBP,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;;;EAGA4C,oBAAoBA,CAAA;IAClB,MAAMH,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMrD,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU+D,KAAK;KACjC,CAAC;IAEF,OAAO,IAAI,CAACzD,IAAI,CAACsD,GAAG,CAAC,GAAG,IAAI,CAACrD,MAAM,iBAAiB,EAAE;MAAEK;IAAO,CAAE,CAAC,CAACM,IAAI,CACrEf,GAAG,CAACgB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,QAAQ,CAAC;IAC/C,CAAC,CAAC,EACFjB,UAAU,CAACoB,KAAK,IAAG;MACjBP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;;;EAGA6C,qBAAqBA,CAACC,UAAkB,EAAEC,MAAc,EAAEC,QAAiB,EAAEC,WAAoB;IAC/F,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMrD,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAU+D,KAAK;KACjC,CAAC;IAEF,MAAMS,IAAI,GAAG;MACXH,MAAM;MACNC,QAAQ,EAAEA,QAAQ,IAAI,WAAW;MACjCC,WAAW,EAAEA,WAAW,IAAI,wBAAwBF,MAAM;KAC3D;IAED,OAAO,IAAI,CAAC/D,IAAI,CAACmE,GAAG,CAAC,GAAG,IAAI,CAAClE,MAAM,cAAc6D,UAAU,SAAS,EAAEI,IAAI,EAAE;MAAE5D;IAAO,CAAE,CAAC,CAACM,IAAI,CAC3Ff,GAAG,CAACgB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEG,QAAQ,CAAC;IAChD,CAAC,CAAC,EACFjB,UAAU,CAACoB,KAAK,IAAG;MACjBP,OAAO,CAACO,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEA;;;EAGAoD,aAAaA,CAACC,cAAsB;IAClC,OAAO,IAAI,CAACrE,IAAI,CAACsD,GAAG,CAAC,GAAG,IAAI,CAACrD,MAAM,oBAAoBoE,cAAc,EAAE,CAAC,CAACzD,IAAI,CAC3Ef,GAAG,CAACgB,QAAQ,IAAG;MACbJ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEG,QAAQ,CAAC;IACrD,CAAC,CAAC,EACFjB,UAAU,CAACoB,KAAK,IAAG;MACjBP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;;;uBApMWlB,aAAa,EAAAwE,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAb3E,aAAa;MAAA4E,OAAA,EAAb5E,aAAa,CAAA6E,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}