// Backend con Integraci√≥n Completa de Forza Ecommerce Engine
require('dotenv').config();
const express = require('express');
const { MongoClient } = require('mongodb');
const cors = require('cors');
const axios = require('axios');
const bcrypt = require('bcrypt');

const app = express();
const PORT = process.env.PORT || 3005;

// Configuraci√≥n de MongoDB
const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/';
const DB_NAME = process.env.DB_NAME || 'enviosdb';

// Configuraci√≥n de Forza Ecommerce Engine
const FORZA_CONFIG = {
    baseUrl: process.env.FORZA_API_URL || 'https://api.forza.com/v1',
    apiKey: process.env.FORZA_API_KEY || '',
    clientId: process.env.FORZA_CLIENT_ID || '',
    enabled: process.env.FORZA_ENABLED === 'true',
    timeout: 30000
};

let db = null;
let mongoClient = null;

// Middleware
app.use(cors({
    origin: ['http://localhost:8080', 'http://localhost:3000', 'http://localhost:4200'],
    credentials: true
}));
app.use(express.json());

console.log('üöÄ Iniciando servidor con integraci√≥n Forza Ecommerce Engine...');
console.log('üîß Forza API habilitada:', FORZA_CONFIG.enabled);

// ============================================
// CONEXI√ìN A MONGODB
// ============================================
async function connectToMongoDB() {
    try {
        console.log('üîÑ Conectando a MongoDB...');
        mongoClient = new MongoClient(MONGO_URI);
        await mongoClient.connect();
        await mongoClient.db("admin").command({ ping: 1 });
        
        db = mongoClient.db(DB_NAME);
        console.log('‚úÖ MongoDB conectado exitosamente:', DB_NAME);
        
        await createDefaultUsers();
        return true;
    } catch (error) {
        console.error('‚ùå Error conectando a MongoDB:', error.message);
        return false;
    }
}

// Crear usuarios por defecto
async function createDefaultUsers() {
    try {
        const users = db.collection('users');
        const existingUsers = await users.countDocuments();
        
        if (existingUsers === 0) {
            const defaultUsers = [
                {
                    username: 'admin',
                    password: await bcrypt.hash('admin123', 10),
                    name: 'Administrador',
                    role: 'admin',
                    email: 'admin@enviosds.com',
                    createdAt: new Date()
                },
                {
                    username: 'usuario1',
                    password: await bcrypt.hash('123456', 10),
                    name: 'Usuario Prueba',
                    role: 'user',
                    email: 'usuario1@enviosds.com',
                    createdAt: new Date()
                },
                {
                    username: 'operador',
                    password: await bcrypt.hash('operador123', 10),
                    name: 'Operador Env√≠os',
                    role: 'operator',
                    email: 'operador@enviosds.com',
                    createdAt: new Date()
                }
            ];
            
            await users.insertMany(defaultUsers);
            console.log('üë• Usuarios por defecto creados');
        }
    } catch (error) {
        console.error('‚ùå Error creando usuarios:', error.message);
    }
}

// ============================================
// FUNCIONES HELPER PARA FORZA API
// ============================================

// Headers para Forza API
function getForzaHeaders() {
    return {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${FORZA_CONFIG.apiKey}`,
        'X-Client-ID': FORZA_CONFIG.clientId,
        'User-Agent': 'EnviosDS/1.0'
    };
}

// Llamada gen√©rica a Forza API
async function callForzaAPI(endpoint, method = 'GET', data = null) {
    try {
        if (!FORZA_CONFIG.enabled) {
            throw new Error('Forza API est√° deshabilitada');
        }

        if (!FORZA_CONFIG.apiKey || !FORZA_CONFIG.clientId) {
            throw new Error('Credenciales de Forza API no configuradas');
        }

        const config = {
            method,
            url: `${FORZA_CONFIG.baseUrl}${endpoint}`,
            headers: getForzaHeaders(),
            timeout: FORZA_CONFIG.timeout
        };

        if (data && (method === 'POST' || method === 'PUT')) {
            config.data = data;
        }

        console.log(`üîó Llamando Forza API: ${method} ${config.url}`);
        const response = await axios(config);
        
        console.log('‚úÖ Respuesta de Forza API recibida');
        return {
            success: true,
            data: response.data,
            status: response.status
        };
    } catch (error) {
        console.error('‚ùå Error en Forza API:', error.message);
        return {
            success: false,
            error: error.message,
            status: error.response?.status || 500
        };
    }
}

// ============================================
// ENDPOINTS B√ÅSICOS
// ============================================

// Health Check
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        service: 'EnviosDS Backend',
        forza: FORZA_CONFIG.enabled ? 'Habilitada' : 'Deshabilitada',
        database: db ? 'Conectada' : 'Desconectada'
    });
});

// Estado de la base de datos
app.get('/api/db-status', (req, res) => {
    res.json({
        connected: !!db,
        database: DB_NAME,
        uri: MONGO_URI,
        timestamp: new Date().toISOString()
    });
});

// ============================================
// ENDPOINTS DE AUTENTICACI√ìN
// ============================================

// Login
app.post('/api/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({
                success: false,
                message: 'Usuario y contrase√±a son requeridos'
            });
        }

        if (!db) {
            return res.status(500).json({
                success: false,
                message: 'Error de conexi√≥n a la base de datos'
            });
        }

        const user = await db.collection('users').findOne({ username });
        
        if (!user) {
            return res.status(401).json({
                success: false,
                message: 'Usuario no encontrado'
            });
        }

        const validPassword = await bcrypt.compare(password, user.password);
        
        if (!validPassword) {
            return res.status(401).json({
                success: false,
                message: 'Contrase√±a incorrecta'
            });
        }

        const userResponse = {
            id: user._id,
            username: user.username,
            name: user.name,
            role: user.role,
            email: user.email
        };

        res.json({
            success: true,
            message: 'Login exitoso',
            user: userResponse
        });

    } catch (error) {
        console.error('‚ùå Error en login:', error);
        res.status(500).json({
            success: false,
            message: 'Error interno del servidor'
        });
    }
});

// ============================================
// DATOS DE UBICACIONES DE GUATEMALA
// ============================================

// Ubicaciones de Guatemala (municipios, departamentos, aldeas)
// Estructura completa de ubicaciones de Guatemala organizadas por departamentos
const guatemalaLocations = {
    "Guatemala": {
        departamento: "Guatemala",
        municipios: {
            "Guatemala": ["Zona 1", "Zona 2", "Zona 3", "Zona 4", "Zona 5", "Zona 6", "Zona 7", "Zona 8", "Zona 9", "Zona 10", "Zona 11", "Zona 12", "Zona 13", "Zona 14", "Zona 15", "Zona 16", "Zona 17", "Zona 18", "Zona 19", "Zona 21"],
            "Mixco": ["Zona 1 de Mixco", "Zona 3 de Mixco", "Zona 4 de Mixco", "Zona 6 de Mixco", "Zona 7 de Mixco", "Zona 8 de Mixco", "Zona 11 de Mixco"],
            "Villa Nueva": ["Villa Nueva Centro", "Villa Lobos", "B√°rcenas", "El Frutal", "San Antonio"],
            "Petapa": ["Petapa Centro", "Villa Hermosa", "San Francisco"],
            "San Jos√© Pinula": ["San Jos√© Pinula Centro", "El Sauce", "Mataquescuintla"],
            "Villa Canales": ["Villa Canales Centro", "Boca del Monte", "San Antonio Las Flores"],
            "Amatitl√°n": ["Amatitl√°n Centro", "El Cerrito", "Villa Canales"],
            "Chinautla": ["Chinautla Centro", "Santa Rosita", "El B√∫caro"],
            "Fraijanes": ["Fraijanes Centro", "El Tabl√≥n", "Los Encuentros"],
            "Palencia": ["Palencia Centro", "San Antonio La Paz", "El Rosario"],
            "San Juan Sacatep√©quez": ["San Juan Sacatep√©quez Centro", "Cruz Blanca", "Comunidad de Ruiz"],
            "San Pedro Sacatep√©quez": ["San Pedro Sacatep√©quez Centro", "El Tejar", "San Jos√©"],
            "San Pedro Ayampuc": ["San Pedro Ayampuc Centro", "Las Flores", "El Rosario"],
            "San Raymundo": ["San Raymundo Centro", "El Jute", "Chuarrancho"],
            "Chuarrancho": ["Chuarrancho Centro", "El Tabl√≥n", "Las Anonas"],
            "Santa Catarina Pinula": ["Santa Catarina Pinula Centro", "El Sauce", "Villa Hermosa"],
            "San Jos√© del Golfo": ["San Jos√© del Golfo Centro", "El Carmen", "Las Ca√±as"]
        }
    },
    "Sacatep√©quez": {
        departamento: "Sacatep√©quez",
        municipios: {
            "Antigua Guatemala": ["Antigua Guatemala Centro", "San Bartolom√© Becerra", "San Crist√≥bal El Alto", "San Felipe de Jes√∫s", "Santa Ana", "Santa In√©s del Monte Pulciano"],
            "Jocotenango": ["Jocotenango Centro", "San Lorenzo El Tejar", "Santa Luc√≠a Milpas Altas"],
            "Pastores": ["Pastores Centro", "El Hato", "Los Tarros"],
            "Sumpango": ["Sumpango Centro", "Xenacoj", "El Tabl√≥n"],
            "Santo Domingo Xenacoj": ["Santo Domingo Xenacoj Centro", "San Gaspar", "Choacorral"],
            "Santiago Sacatep√©quez": ["Santiago Sacatep√©quez Centro", "Chimaltenango", "San Lucas"],
            "San Bartolom√© Milpas Altas": ["San Bartolom√© Centro", "Las Crucitas", "Los Aposentos"],
            "San Lucas Sacatep√©quez": ["San Lucas Centro", "El Manzanillo", "Zorzoya"],
            "Santa Luc√≠a Milpas Altas": ["Santa Luc√≠a Centro", "El Hato", "La Embaulada"],
            "Magdalena Milpas Altas": ["Magdalena Centro", "El Hato", "Los Aposentos"],
            "Santa Mar√≠a de Jes√∫s": ["Santa Mar√≠a de Jes√∫s Centro", "San Miguel Escobar", "San Juan del Obispo"],
            "Ciudad Vieja": ["Ciudad Vieja Centro", "San Miguel Escobar", "Choacorral"],
            "San Miguel Due√±as": ["San Miguel Due√±as Centro", "Santa Catarina Bobadilla", "El Hato"],
            "Alotenango": ["Alotenango Centro", "San Miguel Pochuta", "El Rodeo"],
            "San Antonio Aguas Calientes": ["San Antonio Centro", "Santa Catarina Bobadilla", "San Miguel Due√±as"],
            "Santa Catarina Barahona": ["Santa Catarina Barahona Centro", "El Hato", "Los Aposentos"]
        }
    },
    "Chimaltenango": {
        departamento: "Chimaltenango",
        municipios: {
            "Chimaltenango": ["Chimaltenango Centro", "San Jos√© Poaquil", "Balany√°"],
            "San Jos√© Poaquil": ["San Jos√© Poaquil Centro", "Simajhuleu", "Pal√≠n"],
            "San Mart√≠n Jilotepeque": ["San Mart√≠n Centro", "Jilotepeque", "Comalapa"],
            "Comalapa": ["Comalapa Centro", "San Jos√© Poaquil", "Balany√°"],
            "Santa Apolonia": ["Santa Apolonia Centro", "Tecp√°n", "Patz√∫n"],
            "Tecp√°n Guatemala": ["Tecp√°n Centro", "Iximch√©", "Patz√∫n"],
            "Patz√∫n": ["Patz√∫n Centro", "Comalapa", "Santa Apolonia"],
            "Pochuta": ["Pochuta Centro", "San Pedro Yepocapa", "Acatenango"],
            "Patzic√≠a": ["Patzic√≠a Centro", "Zaragoza", "Santa Cruz Balany√°"],
            "Santa Cruz Balany√°": ["Santa Cruz Balany√° Centro", "Patzic√≠a", "El Tejar"],
            "Acatenango": ["Acatenango Centro", "La Soledad", "Yepocapa"],
            "San Pedro Yepocapa": ["San Pedro Yepocapa Centro", "Pochuta", "Acatenango"],
            "San Andr√©s Itzapa": ["San Andr√©s Itzapa Centro", "Parramos", "Zaragoza"],
            "Parramos": ["Parramos Centro", "San Andr√©s Itzapa", "Zaragoza"],
            "Zaragoza": ["Zaragoza Centro", "Parramos", "El Tejar"],
            "El Tejar": ["El Tejar Centro", "Zaragoza", "Parramos"]
        }
    },
    "Escuintla": {
        departamento: "Escuintla",
        municipios: {
            "Escuintla": ["Escuintla Centro", "Concepci√≥n", "El Rosario"],
            "Santa Luc√≠a Cotzumalguapa": ["Cotzumalguapa Centro", "La Democracia", "Siquinal√°"],
            "La Democracia": ["La Democracia Centro", "Sipacate", "Buena Vista"],
            "Siquinal√°": ["Siquinal√° Centro", "Masagua", "Puerto de San Jos√©"],
            "Masagua": ["Masagua Centro", "Tiquisate", "La Gomera"],
            "Tiquisate": ["Tiquisate Centro", "Nueva Concepci√≥n", "Cuyotenango"],
            "La Gomera": ["La Gomera Centro", "Guanagazapa", "Sipacate"],
            "Guanagazapa": ["Guanagazapa Centro", "Iztapa", "Puerto Quetzal"],
            "San Jos√©": ["Puerto San Jos√©", "Chulamar", "Monterrico"],
            "Iztapa": ["Iztapa Centro", "Puerto Quetzal", "Monterrico"],
            "Pal√≠n": ["Pal√≠n Centro", "San Vicente Pacaya", "Escuintla"],
            "San Vicente Pacaya": ["San Vicente Pacaya Centro", "Pal√≠n", "Amatitl√°n"],
            "Nueva Concepci√≥n": ["Nueva Concepci√≥n Centro", "Tiquisate", "Cuyotenango"],
            "Sipacate": ["Sipacate Centro", "La Democracia", "Monterrico"]
        }
    }
};

// Funci√≥n para obtener todas las ubicaciones en formato plano
function getAllLocationsFlat() {
    const locations = [];
    
    Object.keys(guatemalaLocations).forEach(departamento => {
        const dept = guatemalaLocations[departamento];
        
        // Agregar el departamento
        locations.push(departamento);
        
        // Agregar municipios
        Object.keys(dept.municipios).forEach(municipio => {
            locations.push(`${municipio}, ${departamento}`);
            
            // Agregar aldeas/localidades
            dept.municipios[municipio].forEach(aldea => {
                locations.push(`${aldea}, ${municipio}, ${departamento}`);
            });
        });
    });
    
    return locations.sort();
}

// Endpoint para obtener ubicaciones de Guatemala (formato completo)
app.get('/api/guatemala/locations', (req, res) => {
    try {
        res.json({
            success: true,
            locations: getAllLocationsFlat(),
            structured: guatemalaLocations,
            count: getAllLocationsFlat().length
        });
    } catch (error) {
        console.error('‚ùå Error obteniendo ubicaciones:', error);
        res.status(500).json({
            success: false,
            message: 'Error obteniendo ubicaciones'
        });
    }
});

// Endpoint para buscar ubicaciones por departamento
app.get('/api/guatemala/locations/:departamento', (req, res) => {
    try {
        const { departamento } = req.params;
        const dept = guatemalaLocations[departamento];
        
        if (!dept) {
            return res.status(404).json({
                success: false,
                message: 'Departamento no encontrado'
            });
        }
        
        const locations = [];
        Object.keys(dept.municipios).forEach(municipio => {
            locations.push(`${municipio}, ${departamento}`);
            dept.municipios[municipio].forEach(aldea => {
                locations.push(`${aldea}, ${municipio}, ${departamento}`);
            });
        });
        
        res.json({
            success: true,
            departamento,
            locations: locations.sort(),
            municipios: Object.keys(dept.municipios),
            count: locations.length
        });
    } catch (error) {
        console.error('‚ùå Error obteniendo ubicaciones por departamento:', error);
        res.status(500).json({
            success: false,
            message: 'Error obteniendo ubicaciones'
        });
    }
});

// Endpoint para obtener solo departamentos
app.get('/api/guatemala/departamentos', (req, res) => {
    try {
        const departamentos = Object.keys(guatemalaLocations);
        res.json({
            success: true,
            departamentos,
            count: departamentos.length
        });
    } catch (error) {
        console.error('‚ùå Error obteniendo departamentos:', error);
        res.status(500).json({
            success: false,
            message: 'Error obteniendo departamentos'
        });
    }
});

// Endpoint para buscar ubicaciones con filtros
app.get('/api/guatemala/search', (req, res) => {
    try {
        const { q, type } = req.query; // q = query, type = departamento|municipio|aldea
        
        if (!q) {
            return res.status(400).json({
                success: false,
                message: 'Par√°metro de b√∫squeda requerido'
            });
        }
        
        const allLocations = getAllLocationsFlat();
        const searchTerm = q.toLowerCase();
        
        let filteredLocations = allLocations.filter(location => 
            location.toLowerCase().includes(searchTerm)
        );
        
        // Filtrar por tipo si se especifica
        if (type) {
            switch (type) {
                case 'departamento':
                    filteredLocations = filteredLocations.filter(loc => 
                        !loc.includes(',') // Solo departamentos
                    );
                    break;
                case 'municipio':
                    filteredLocations = filteredLocations.filter(loc => 
                        (loc.match(/,/g) || []).length === 1 // municipio, departamento
                    );
                    break;
                case 'aldea':
                    filteredLocations = filteredLocations.filter(loc => 
                        (loc.match(/,/g) || []).length === 2 // aldea, municipio, departamento
                    );
                    break;
            }
        }
        
        res.json({
            success: true,
            query: q,
            type: type || 'all',
            locations: filteredLocations.slice(0, 50), // Limitar a 50 resultados
            count: filteredLocations.length
        });
    } catch (error) {
        console.error('‚ùå Error en b√∫squeda de ubicaciones:', error);
        res.status(500).json({
            success: false,
            message: 'Error en b√∫squeda'
        });
    }
});

// ============================================
// ENDPOINTS DE FORZA ECOMMERCE ENGINE
// ============================================

// 1. Verificar estado de Forza API
app.get('/api/forza/status', async (req, res) => {
    try {
        if (!FORZA_CONFIG.enabled) {
            return res.json({
                enabled: false,
                configured: false,
                message: 'Forza API est√° deshabilitada'
            });
        }

        const result = await callForzaAPI('/health');
        
        res.json({
            enabled: FORZA_CONFIG.enabled,
            configured: !!(FORZA_CONFIG.apiKey && FORZA_CONFIG.clientId),
            api_status: result.success ? 'Online' : 'Offline',
            last_check: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error verificando estado de Forza API'
        });
    }
});

// 2. Obtener servicios de env√≠o disponibles
app.get('/api/forza/services', async (req, res) => {
    try {
        const result = await callForzaAPI('/shipping/services');
        
        if (result.success) {
            res.json({
                success: true,
                services: result.data
            });
        } else {
            // Fallback con servicios locales
            res.json({
                success: true,
                services: [
                    { id: 'standard', name: 'Env√≠o Est√°ndar', delivery_time: '3-5 d√≠as' },
                    { id: 'express', name: 'Env√≠o Express', delivery_time: '1-2 d√≠as' },
                    { id: 'overnight', name: 'Env√≠o Nocturno', delivery_time: '24 horas' }
                ],
                source: 'local'
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error obteniendo servicios de env√≠o'
        });
    }
});

// 3. Cotizar env√≠o con Forza
app.post('/api/forza/quote', async (req, res) => {
    try {
        const { origin, destination, package_details, service_type } = req.body;

        // Validaciones b√°sicas
        if (!origin || !destination || !package_details) {
            return res.status(400).json({
                success: false,
                message: 'Origen, destino y detalles del paquete son requeridos'
            });
        }

        // Preparar datos para Forza API
        const forzaData = {
            shipment: {
                origin: {
                    address: origin.address,
                    city: origin.city,
                    state: origin.state,
                    postal_code: origin.postal_code,
                    country: origin.country || 'GT'
                },
                destination: {
                    address: destination.address,
                    city: destination.city,
                    state: destination.state,
                    postal_code: destination.postal_code,
                    country: destination.country || 'GT'
                },
                package: {
                    weight: package_details.weight,
                    dimensions: {
                        length: package_details.length,
                        width: package_details.width,
                        height: package_details.height
                    },
                    declared_value: package_details.declared_value || 0
                },
                service_type: service_type || 'standard'
            }
        };

        console.log('üì¶ Cotizando con Forza API:', forzaData);
        const result = await callForzaAPI('/shipping/quote', 'POST', forzaData);

        if (result.success) {
            // Guardar cotizaci√≥n en base de datos
            if (db) {
                await db.collection('quotes').insertOne({
                    ...forzaData.shipment,
                    forza_response: result.data,
                    created_at: new Date(),
                    source: 'forza'
                });
            }

            res.json({
                success: true,
                quote: result.data,
                source: 'forza'
            });
        } else {
            // Fallback a cotizaci√≥n local
            const localQuote = await generateLocalQuote(origin, destination, package_details);
            res.json(localQuote);
        }

    } catch (error) {
        console.error('‚ùå Error en cotizaci√≥n Forza:', error);
        
        // Fallback a cotizaci√≥n local
        try {
            const localQuote = await generateLocalQuote(req.body.origin, req.body.destination, req.body.package_details);
            res.json(localQuote);
        } catch (fallbackError) {
            res.status(500).json({
                success: false,
                message: 'Error en cotizaci√≥n'
            });
        }
    }
});

// 4. Crear env√≠o con Forza
app.post('/api/forza/shipment', async (req, res) => {
    try {
        const shipmentData = req.body;
        
        const result = await callForzaAPI('/shipments', 'POST', shipmentData);
        
        if (result.success) {
            // Guardar env√≠o en base de datos
            if (db) {
                await db.collection('shipments').insertOne({
                    ...shipmentData,
                    forza_response: result.data,
                    tracking_number: result.data.tracking_number,
                    status: 'created',
                    created_at: new Date(),
                    source: 'forza'
                });
            }

            res.json({
                success: true,
                shipment: result.data,
                tracking_number: result.data.tracking_number
            });
        } else {
            res.status(400).json({
                success: false,
                message: 'Error creando env√≠o con Forza',
                error: result.error
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error interno creando env√≠o'
        });
    }
});

// 3. Rastrear env√≠o
app.post('/api/forza/tracking', async (req, res) => {
    try {
        const { trackingNumber } = req.body;
        
        if (!trackingNumber) {
            return res.status(400).json({
                success: false,
                message: 'N√∫mero de tracking requerido'
            });
        }

        let trackingResult;

        if (FORZA_CONFIG.enabled) {
            try {
                trackingResult = await callForzaAPI(`/tracking/${trackingNumber}`, 'GET');
            } catch (error) {
                console.log('‚ö†Ô∏è Error con Forza API, usando fallback local:', error.message);
                trackingResult = generateLocalTracking(trackingNumber);
            }
        } else {
            trackingResult = generateLocalTracking(trackingNumber);
        }

        // Guardar en base de datos si est√° disponible
        if (db) {
            await db.collection('tracking_queries').insertOne({
                trackingNumber,
                result: trackingResult,
                source: FORZA_CONFIG.enabled ? 'forza' : 'local',
                queriedAt: new Date()
            });
        }

        res.json({
            success: true,
            tracking: trackingResult,
            source: FORZA_CONFIG.enabled ? 'forza' : 'local'
        });

    } catch (error) {
        console.error('‚ùå Error en tracking:', error);
        res.status(500).json({
            success: false,
            message: 'Error consultando tracking'
        });
    }
});

// Mantener endpoint GET por compatibilidad
app.get('/api/forza/tracking/:trackingNumber', async (req, res) => {
    try {
        const { trackingNumber } = req.params;
        
        const result = await callForzaAPI(`/tracking/${trackingNumber}`);
        
        if (result.success) {
            res.json({
                success: true,
                tracking: result.data
            });
        } else {
            // Buscar en base de datos local
            if (db) {
                const shipment = await db.collection('shipments').findOne({
                    tracking_number: trackingNumber
                });
                
                if (shipment) {
                    res.json({
                        success: true,
                        tracking: {
                            tracking_number: trackingNumber,
                            status: shipment.status || 'in_transit',
                            events: shipment.events || [],
                            estimated_delivery: shipment.estimated_delivery
                        },
                        source: 'local'
                    });
                } else {
                    res.status(404).json({
                        success: false,
                        message: 'N√∫mero de rastreo no encontrado'
                    });
                }
            }
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error rastreando env√≠o'
        });
    }
});

// ============================================
// FUNCIONES DE FALLBACK LOCALES
// ============================================

async function generateLocalQuote(origin, destination, packageDetails) {
    // Algoritmo simple de cotizaci√≥n local
    const baseRate = 15.00; // Q15 base
    const weightRate = packageDetails.weight * 2.50; // Q2.50 por kg
    const distanceRate = 5.00; // Q5 estimado por distancia
    const valueRate = (packageDetails.declared_value || 0) * 0.01; // 1% del valor declarado
    
    const total = baseRate + weightRate + distanceRate + valueRate;
    
    const quote = {
        success: true,
        quote: {
            total_cost: total.toFixed(2),
            currency: 'GTQ',
            estimated_delivery: '3-5 d√≠as laborales',
            services: [
                {
                    service_id: 'standard',
                    name: 'Env√≠o Est√°ndar',
                    cost: total.toFixed(2),
                    delivery_time: '3-5 d√≠as'
                },
                {
                    service_id: 'express',
                    name: 'Env√≠o Express',
                    cost: (total * 1.5).toFixed(2),
                    delivery_time: '1-2 d√≠as'
                }
            ]
        },
        source: 'local'
    };

    // Guardar cotizaci√≥n local en DB
    if (db) {
        await db.collection('quotes').insertOne({
            origin,
            destination,
            package_details: packageDetails,
            quote: quote.quote,
            created_at: new Date(),
            source: 'local'
        });
    }

    return quote;
}

// ============================================
// ENDPOINT DE COTIZACI√ìN LEGACY (COMPATIBILIDAD)
// ============================================

app.post('/api/cotizar', async (req, res) => {
    try {
        const { origen, destino, peso, alto, ancho, largo, valor_declarado } = req.body;

        // Convertir formato legacy a formato Forza
        const origin = { city: origen, country: 'GT' };
        const destination = { city: destino, country: 'GT' };
        const package_details = {
            weight: peso,
            length: largo,
            width: ancho,
            height: alto,
            declared_value: valor_declarado
        };

        const quote = await generateLocalQuote(origin, destination, package_details);
        res.json(quote);
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error generando cotizaci√≥n'
        });
    }
});

// ============================================
// ENDPOINTS DE GESTI√ìN
// ============================================

// Listar env√≠os con POST (permite filtros)
app.post('/api/shipments', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({
                success: false,
                message: 'Base de datos no disponible'
            });
        }

        // Obtener filtros del body (opcional)
        const { limit = 50, status, dateFrom, dateTo } = req.body || {};
        
        let query = {};
        if (status) query.status = status;
        if (dateFrom || dateTo) {
            query.created_at = {};
            if (dateFrom) query.created_at.$gte = new Date(dateFrom);
            if (dateTo) query.created_at.$lte = new Date(dateTo);
        }

        const shipments = await db.collection('shipments')
            .find(query)
            .sort({ created_at: -1 })
            .limit(parseInt(limit))
            .toArray();

        res.json({
            success: true,
            shipments,
            count: shipments.length
        });

    } catch (error) {
        console.error('‚ùå Error obteniendo env√≠os:', error);
        res.status(500).json({
            success: false,
            message: 'Error obteniendo env√≠os'
        });
    }
});

// Listar env√≠os (GET - compatibilidad)
app.get('/api/shipments', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({
                success: false,
                message: 'Base de datos no disponible'
            });
        }

        const shipments = await db.collection('shipments')
            .find({})
            .sort({ created_at: -1 })
            .limit(50)
            .toArray();

        res.json({
            success: true,
            shipments
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error obteniendo env√≠os'
        });
    }
});

// Listar cotizaciones con POST (permite filtros)
app.post('/api/quotes', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({
                success: false,
                message: 'Base de datos no disponible'
            });
        }

        // Obtener filtros del body (opcional)
        const { limit = 50, source, dateFrom, dateTo } = req.body || {};
        
        let query = {};
        if (source) query.source = source;
        if (dateFrom || dateTo) {
            query.created_at = {};
            if (dateFrom) query.created_at.$gte = new Date(dateFrom);
            if (dateTo) query.created_at.$lte = new Date(dateTo);
        }

        const quotes = await db.collection('quotes')
            .find(query)
            .sort({ created_at: -1 })
            .limit(parseInt(limit))
            .toArray();

        res.json({
            success: true,
            quotes,
            count: quotes.length
        });

    } catch (error) {
        console.error('‚ùå Error obteniendo cotizaciones:', error);
        res.status(500).json({
            success: false,
            message: 'Error obteniendo cotizaciones'
        });
    }
});

// Listar cotizaciones (GET - compatibilidad)
app.get('/api/quotes', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({
                success: false,
                message: 'Base de datos no disponible'
            });
        }

        const quotes = await db.collection('quotes')
            .find({})
            .sort({ created_at: -1 })
            .limit(50)
            .toArray();

        res.json({
            success: true,
            quotes
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error obteniendo cotizaciones'
        });
    }
});

// ============================================
// ENDPOINTS PARA GESTI√ìN DE ENV√çOS
// ============================================

// Obtener historial de env√≠os
app.get('/api/shipments/history', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({ success: false, message: 'Base de datos no conectada' });
        }

        const shipments = await db.collection('shipments')
            .find({})
            .sort({ created_at: -1 })
            .limit(50)
            .toArray();

        const formattedShipments = shipments.map(shipment => ({
            id: shipment._id,
            recipient_name: shipment.recipient_name,
            recipient_email: shipment.recipient_email,
            recipient_phone: shipment.recipient_phone,
            contact_name: shipment.contact_name,
            department: shipment.department,
            municipality: shipment.municipality,
            village: shipment.village,
            exact_address: shipment.exact_address,
            address_summary: `${shipment.municipality}, ${shipment.department}`,
            created_at: shipment.created_at,
            tracking_number: shipment.tracking_number
        }));

        res.json({
            success: true,
            shipments: formattedShipments
        });

    } catch (error) {
        console.error('Error obteniendo historial de env√≠os:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Error interno del servidor' 
        });
    }
});

// Guardar datos del destinatario
app.post('/api/shipments/save-recipient', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({ success: false, message: 'Base de datos no conectada' });
        }

        const recipientData = {
            ...req.body,
            created_at: new Date(),
            type: 'recipient_data'
        };

        const result = await db.collection('recipients').insertOne(recipientData);

        res.json({
            success: true,
            message: 'Datos del destinatario guardados correctamente',
            id: result.insertedId
        });

    } catch (error) {
        console.error('Error guardando datos del destinatario:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Error interno del servidor' 
        });
    }
});

// Crear env√≠o completo
app.post('/api/shipments/create', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({ success: false, message: 'Base de datos no conectada' });
        }

        // Generar n√∫mero de seguimiento √∫nico
        const trackingNumber = `DS${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`;

        const shipmentData = {
            ...req.body,
            tracking_number: trackingNumber,
            status: 'created',
            created_at: new Date(),
            updated_at: new Date()
        };

        // Insertar en base de datos
        const result = await db.collection('shipments').insertOne(shipmentData);

        // Crear registro de seguimiento
        const trackingData = {
            shipment_id: result.insertedId,
            tracking_number: trackingNumber,
            status: 'created',
            events: [
                {
                    date: new Date(),
                    description: 'Env√≠o creado',
                    location: `${shipmentData.municipality}, ${shipmentData.department}`
                }
            ],
            created_at: new Date()
        };

        await db.collection('tracking').insertOne(trackingData);

        res.json({
            success: true,
            message: 'Env√≠o creado exitosamente',
            guide: {
                id: result.insertedId,
                tracking_number: trackingNumber,
                status: 'created'
            }
        });

    } catch (error) {
        console.error('Error creando env√≠o:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Error interno del servidor' 
        });
    }
});

// Descargar gu√≠a de env√≠o
app.get('/api/shipments/download-guide/:id', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({ success: false, message: 'Base de datos no conectada' });
        }

        const { ObjectId } = require('mongodb');
        const shipmentId = new ObjectId(req.params.id);

        const shipment = await db.collection('shipments').findOne({ _id: shipmentId });

        if (!shipment) {
            return res.status(404).json({ success: false, message: 'Env√≠o no encontrado' });
        }

        // Generar contenido PDF simple (en texto)
        const guideContent = `
=== GU√çA DE ENV√çO ===
N√∫mero de Seguimiento: ${shipment.tracking_number}
Fecha: ${shipment.created_at.toLocaleDateString()}

DESTINATARIO:
Nombre: ${shipment.recipient_name}
Email: ${shipment.recipient_email || 'No proporcionado'}
Tel√©fono: ${shipment.recipient_phone}
Contacto: ${shipment.contact_name || 'N/A'}

DIRECCI√ìN:
${shipment.exact_address}
${shipment.village ? shipment.village + ', ' : ''}${shipment.municipality}
${shipment.department}, Guatemala

PAQUETE:
Tama√±o: ${shipment.package_size}
Descripci√≥n: ${shipment.package_description || 'No especificada'}
Valor: Q${shipment.package_value || 0}

Status: ${shipment.status}
        `;

        res.setHeader('Content-Type', 'text/plain');
        res.setHeader('Content-Disposition', `attachment; filename="guia_${shipment.tracking_number}.txt"`);
        res.send(guideContent);

    } catch (error) {
        console.error('Error descargando gu√≠a:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Error interno del servidor' 
        });
    }
});

// ============================================
// ENDPOINTS PARA UBICACIONES DE GUATEMALA
// ============================================

// Obtener departamentos
app.get('/api/guatemala/departments', async (req, res) => {
    try {
        // Departamentos de Guatemala con sus municipios principales
        const departments = [
            {
                name: "Guatemala",
                municipalities: ["Guatemala", "Mixco", "Villa Nueva", "San Jos√© Pinula", "Santa Catarina Pinula", "San Jos√© del Golfo", "Palencia", "Chinautla", "San Pedro Ayampuc", "San Juan Sacatep√©quez", "San Pedro Sacatep√©quez", "San Raymundo", "Chuarrancho", "Fraijanes", "Amatitl√°n", "Villa Canales", "Petapa"]
            },
            {
                name: "Sacatep√©quez",
                municipalities: ["Antigua Guatemala", "Jocotenango", "Pastores", "Sumpango", "Santo Domingo Xenacoj", "Santiago Sacatep√©quez", "San Bartolom√© Milpas Altas", "San Lucas Sacatep√©quez", "Santa Luc√≠a Milpas Altas", "Magdalena Milpas Altas", "Santa Mar√≠a de Jes√∫s", "Ciudad Vieja", "San Miguel Due√±as", "Alotenango", "San Antonio Aguas Calientes", "Santa Catarina Barahona"]
            },
            {
                name: "Chimaltenango",
                municipalities: ["Chimaltenango", "San Jos√© Poaquil", "San Mart√≠n Jilotepeque", "Comalapa", "Santa Apolonia", "Tecp√°n Guatemala", "Patz√∫n", "Pochuta", "Patzic√≠a", "Santa Cruz Balany√°", "Acatenango", "Yepocapa", "San Andr√©s Itzapa", "Parramos", "Zaragoza", "El Tejar"]
            },
            {
                name: "Escuintla",
                municipalities: ["Escuintla", "Santa Luc√≠a Cotzumalguapa", "La Democracia", "Siquinal√°", "Masagua", "Tiquisate", "La Gomera", "Guanagazapa", "San Jos√©", "Iztapa", "Pal√≠n", "San Vicente Pacaya", "Nueva Concepci√≥n", "Taxisco"]
            },
            {
                name: "Santa Rosa",
                municipalities: ["Cuilapa", "Barberena", "Santa Rosa de Lima", "Casillas", "San Rafael las Flores", "Oratorio", "San Juan Tecuaco", "Chiquimulilla", "Taxisco", "Santa Mar√≠a Ixhuat√°n", "Guazacap√°n", "Santa Cruz Naranjo", "Pueblo Nuevo Vi√±as", "Nueva Santa Rosa"]
            }
        ];

        res.json({
            success: true,
            departments: departments
        });

    } catch (error) {
        console.error('Error obteniendo departamentos:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Error interno del servidor' 
        });
    }
});

// Obtener municipios por departamento
app.get('/api/guatemala/municipalities', async (req, res) => {
    try {
        const { department } = req.query;

        if (!department) {
            return res.status(400).json({ success: false, message: 'Departamento requerido' });
        }

        // Mapeo de departamentos a municipios (simplificado)
        const departmentMunicipalities = {
            "Guatemala": ["Guatemala", "Mixco", "Villa Nueva", "San Jos√© Pinula", "Santa Catarina Pinula", "Chinautla", "San Pedro Ayampuc", "Amatitl√°n", "Villa Canales", "Petapa"],
            "Sacatep√©quez": ["Antigua Guatemala", "Jocotenango", "Pastores", "Sumpango", "San Lucas Sacatep√©quez", "Ciudad Vieja", "San Antonio Aguas Calientes"],
            "Chimaltenango": ["Chimaltenango", "Tecp√°n Guatemala", "Patz√∫n", "Comalapa", "San Mart√≠n Jilotepeque", "Acatenango", "Yepocapa"],
            "Escuintla": ["Escuintla", "Santa Luc√≠a Cotzumalguapa", "La Democracia", "Tiquisate", "Masagua", "Pal√≠n", "Nueva Concepci√≥n"],
            "Santa Rosa": ["Cuilapa", "Barberena", "Chiquimulilla", "Santa Rosa de Lima", "Taxisco", "Guazacap√°n"]
        };

        const municipalities = departmentMunicipalities[department] || [];

        res.json({
            success: true,
            municipalities: municipalities
        });

    } catch (error) {
        console.error('Error obteniendo municipios:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Error interno del servidor' 
        });
    }
});

// Obtener aldeas/poblados por municipio
app.get('/api/guatemala/villages', async (req, res) => {
    try {
        const { department, municipality } = req.query;

        if (!department || !municipality) {
            return res.status(400).json({ success: false, message: 'Departamento y municipio requeridos' });
        }

        // Generar algunas aldeas ejemplo (esto deber√≠a venir de una base de datos real)
        const exampleVillages = [
            `${municipality} Centro`,
            `${municipality} Norte`,
            `${municipality} Sur`,
            `${municipality} Este`,
            `${municipality} Oeste`,
            `Aldea El Progreso`,
            `Aldea La Esperanza`,
            `Aldea San Antonio`,
            `Aldea El Carmen`,
            `Cant√≥n Central`
        ];

        res.json({
            success: true,
            villages: exampleVillages
        });

    } catch (error) {
        console.error('Error obteniendo aldeas:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Error interno del servidor' 
        });
    }
});

// ============================================
// INICIALIZACI√ìN DEL SERVIDOR
// ============================================

async function startServer() {
    try {
        const dbConnected = await connectToMongoDB();
        
        app.listen(PORT, () => {
            console.log('');
            console.log('üöÄ ===============================================');
            console.log(`üì° Servidor ejecut√°ndose en http://localhost:${PORT}`);
            console.log('üéØ Endpoints disponibles:');
            console.log('   üìä GET  /api/health');
            console.log('   ÔøΩ GET  /api/db-status');
            console.log('   ÔøΩüîê POST /api/login');
            console.log('   üåê GET  /api/forza/status');
            console.log('   üì¶ POST /api/forza/quote');
            console.log('   üöö POST /api/forza/shipment');
            console.log('   üìç POST /api/forza/tracking');
            console.log('   üìã POST /api/shipments');
            console.log('   üí∞ POST /api/quotes');
            console.log(`üé® Forza API: ${FORZA_CONFIG.enabled ? '‚úÖ Habilitada' : '‚ùå Deshabilitada'}`);
            console.log(`üíæ MongoDB: ${db ? '‚úÖ Conectada' : '‚ùå Desconectada'}`);
            console.log('üöÄ ===============================================');
            console.log('');
        });
    } catch (error) {
        console.error('‚ùå Error iniciando servidor:', error);
        process.exit(1);
    }
}

// Manejar cierre graceful
process.on('SIGINT', async () => {
    console.log('\nüîÑ Cerrando servidor...');
    if (mongoClient) {
        await mongoClient.close();
        console.log('üìÅ MongoDB desconectado');
    }
    process.exit(0);
});

// Iniciar servidor
startServer();
